/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.testing.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.testing.server.given.entity";
option java_outer_classname = "EntitiesProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "spine/core/user_id.proto";

//
// This file provides entity definitions for tests under `io.spine.testing.server`.
//
// The prefix `Tu` is used to distinguish these types from other similarly named types used
// for general purpose tests of the framework.
//

message TuProjectId {
    string value = 1;
}

message TuTaskId {
    string value = 1;
}

// A state for an aggregate.
message TuProject {
    option (entity).kind = AGGREGATE;

    TuProjectId id = 1;

    google.protobuf.Timestamp timestamp = 2;
}

// A state of an aggregate part.
message TuProjectPart {
    option (entity).kind = AGGREGATE;

    TuProjectId id = 1;

    string value = 2;
}

// A state of an aggregate part.
message TuComments {
    option (entity).kind = AGGREGATE;

    TuTaskId id = 1;

    google.protobuf.Timestamp timestamp = 2;

    bool comment_limit_reached = 3;

    int32 comments_received_by_email = 4;
}

// A state of a process manager.
//
// Holds only the `Timestamp` value for being able to test that the state changes.
// Shared among several test classes for the sake of brevity.
//
message TuPmState {
    option (entity).kind = PROCESS_MANAGER;

    TuProjectId id = 1;

    google.protobuf.Timestamp timestamp = 2;
}

// A state of a projection.
message TuEventLog {
    option (entity).kind = PROJECTION;

    TuProjectId id = 1;

    repeated google.protobuf.Any event = 2;
}

// A state for `TuProjection`.
message TuString {
    option (entity).kind = PROJECTION;

    uint64 id = 1;

    string value = 2;
}
