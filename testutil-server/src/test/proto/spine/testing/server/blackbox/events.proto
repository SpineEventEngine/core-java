/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.testing.server.blackbox;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.testing.server.blackbox.event";
option java_outer_classname = "TestIntEventsProto";
option java_multiple_files = true;

import "spine/testing/server/blackbox/entities.proto";
import "spine/testing/server/blackbox/report.proto";
import "spine/core/user_id.proto";

message BbProjectCreated {
    BbProjectId project_id = 1 [(required) = true];
}

message BbTaskAdded {
    BbProjectId project_id = 1 [(required) = true];
    BbTask task = 2;
}

message BbProjectStarted {
    BbProjectId project_id = 1 [(required) = true];
}

message BbReportCreated {
    BbReportId report_id = 1 [(required) = true];
    repeated BbProjectId project_id = 2;
}

message BbTaskAddedToReport {
    BbReportId report_id = 1 [(required) = true];
    BbProjectId project_id = 2;
    BbTask task = 3;
}

message BbAssigneeAdded {
    BbProjectId id = 1 [(required) = true];
    spine.core.UserId user_id = 2 [(required) = true];
}

message BbAssigneeRemoved {
    BbProjectId id = 1 [(required) = true];
    spine.core.UserId user_id = 2 [(required) = true];
}

message BbEventDispatcherRegistered {

    string dispatcher_name = 1;
}

//
// External `Users` bounded context events
//

message BbUserDeleted {
    spine.core.UserId id = 1 [(required) = true];
    
    repeated BbProjectId project = 2;
}
