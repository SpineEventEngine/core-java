
project.ext {
    // NOTE: when updating Protobuf dependency, please check that KnownTypes.addStandardProtobufTypes() method
    // is updated with new Message types introduced in the new version of Protobuf.
    PROTOBUF_VERSION = '3.0.0-beta-3'
    PROTOBUF_DEPENDENCY = "com.google.protobuf:protoc:${PROTOBUF_VERSION}"
    GRPC_VERSION = '0.14.0'
    SLF4J_VERSION = '1.7.21'

    SPINE_PROTOBUF_PLUGIN_ID = 'org.spine3.tools.protobuf-plugin'
    PUBLISH_PLUGIN_PATH = "$projectDir/gradle/plugins/publish.gradle"

    CREDENTIALS_FILE_PATH = 'credentials.properties'
    PROJECTS_TO_PUBLISH = ["client", "server", "values", "testutil"]
}

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url = 'http://maven.teamdev.com/repository/spine'
        }
    }
    dependencies {
        classpath group: 'com.google.protobuf', name:'protobuf-gradle-plugin', version: '0.7.7'
        classpath group: 'org.spine3.tools', name: 'protobuf-plugin', version: '1.4.8', changing: true
    }
    configurations.all({
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    })
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'

    group = 'org.spine3'
    version = '0.5.1-SNAPSHOT'
}

subprojects {

    project.ext {
        SRC_DIR = "$projectDir/src"
        GEN_DIR = "$projectDir/generated"

        GEN_MAIN_JAVA_DIR = "$GEN_DIR/main/java"
        GEN_TEST_JAVA_DIR = "$GEN_DIR/test/java"

        GEN_MAIN_GRPC_DIR = "$GEN_DIR/main/grpc"
        GEN_TEST_GRPC_DIR = "$GEN_DIR/test/grpc"

        GEN_MAIN_SPINE_DIR = "$GEN_DIR/main/spine"

        TEST_ARTIFACTS_PLUGIN_PATH = '../gradle/plugins/test-artifacts.gradle'
        GEN_DESCRIPTOR_SET_PLUGIN_PATH = '../gradle/plugins/generate-descriptor-set.gradle'
        GRPC_PLUGIN_PATH = '../gradle/plugins/grpc.gradle'
        JACOCO_PLUGIN_PATH = '../gradle/plugins/jacoco.gradle'
    }

    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'
    apply from: JACOCO_PLUGIN_PATH

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    // Set Java home to point to JDK7 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile group: 'com.google.guava', name: 'guava', version: '19.0'
        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'

        //As a Library, we provide logging facade API, not specific logger bindings.
        //Target apps are free to use any binding they need.
        compile group: 'org.slf4j', name: 'slf4j-api', version: project.SLF4J_VERSION

        compile group: 'com.google.protobuf', name: 'protobuf-java', version: project.PROTOBUF_VERSION
        compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: project.PROTOBUF_VERSION

        //Use jdk14 bindings for test purposes only.
        testCompile group: 'org.slf4j', name: 'slf4j-jdk14', version: project.SLF4J_VERSION
        testCompile(group: 'junit', name: 'junit', version: '4.12') {
            exclude(module: 'hamcrest-core')
        }
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '2.+'
    }

    sourceSets {
        main {
            proto.srcDirs = ["$SRC_DIR/main/proto"]
            java.srcDirs = [GEN_MAIN_JAVA_DIR, "$SRC_DIR/main/java"]
            resources.srcDirs = ["$GEN_DIR/main/resources"]
        }
        test {
            proto.srcDirs = ["$SRC_DIR/test/proto"]
            java.srcDirs = [GEN_TEST_JAVA_DIR, "$SRC_DIR/test/java"]
            resources.srcDirs = ["$GEN_DIR/test/resources"]
        }
    }

    protobuf {
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:$GRPC_VERSION"
            }
        }
        generatedFilesBaseDir = GEN_DIR
        protoc {
            artifact = project.PROTOBUF_DEPENDENCY
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    idea.module.iml {
        beforeMerged { final module ->
            module.dependencies.clear()
        }
        whenMerged { final module ->
            module.dependencies*.exported = true
        }
    }

    idea.module {
        generatedSourceDirs += file(GEN_MAIN_JAVA_DIR)
        testSourceDirs += file(GEN_TEST_JAVA_DIR)
    }
}

idea.project.ipr {
    beforeMerged { final project ->
        project.modulePaths.clear()
    }
    withXml { final provider ->
        provider.node.component
                .find { it.@name == 'VcsDirectoryMappings' }
                .mapping.@vcs = 'Git'
    }
}

apply from: PUBLISH_PLUGIN_PATH
