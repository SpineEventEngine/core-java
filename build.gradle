/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript { final scriptHandler ->

    // Applying from `version.gradle` inside the `buildscript` section to reuse the properties.
    //
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `version.gradle` explicitly here.
    apply from: 'version.gradle'
    apply from: "$rootDir/config/gradle/dependencies.gradle"

    defaultRepositories(scriptHandler)
    dependencies {
        classpath deps.build.guava
        classpath deps.build.gradlePlugins.errorProne
        classpath deps.build.gradlePlugins.protobuf
        classpath "io.spine.tools:spine-model-compiler:$spineBaseVersion"
    }

    forceConfiguration(scriptHandler)
    configurations.all {
        resolutionStrategy {
            //noinspection GroovyAssignabilityCheck
            force(
                    "io.spine:spine-base:$spineBaseVersion",
                    "io.spine:spine-time:$spineTimeVersion"
            )
        }
    }
}

apply from: 'version.gradle'

ext {
    spineJacocoScript = "${rootDir}/config/gradle/jacoco.gradle"
    spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'

    credentialsPropertyFile = 'credentials.properties'
    publishPlugin = "$rootDir/config/gradle/publish.gradle"
    projectsToPublish = ["core",
                         "client",
                         "server",
                         "testutil-core",
                         "testutil-client",
                         "testutil-server",
                         "model-assembler",
                         "model-verifier"]
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    group = 'io.spine'
    version = versionToPublish
}

final boolean isTravis = System.env.TRAVIS == 'true'

/**
 * Determines whether the given {@code project} should expose its Javadoc to
 * SpineEventEngine.github.io website.
 *
 * <p>Currently, the {@code testutil} projects are excluded from publishing, as well as the modules
 * that perform the model compile-time checks.
 *
 * @param project the project to check
 * @return {@code true} is the project Javadoc should be published, {@code false} otherwise
 */
static boolean shouldPublishJavadoc(final Project project) {
    return !project.name.startsWith('testutil') && !project.name.startsWith("model")
}

subprojects {
    project.ext {
        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"

        testArtifactsScript = "${rootDir}/scripts/test-artifacts.gradle"
        filterInternalJavadocsScript = "${rootDir}/config/gradle/filter-internal-javadoc.gradle"
        updateDocsPlugin = "$rootDir/scripts/update-gh-pages.gradle"
    }

    apply plugin: 'com.google.protobuf'
    apply plugin: 'java-library'
    apply plugin: 'net.ltgt.errorprone'
    apply plugin: 'pmd'
    apply plugin: spineProtobufPluginId

    apply from: deps.scripts.javacArgs

    // Specific setup for a Travis build,
    // which prevents appearing of warning messages in build logs.
    //
    // It is expected that warnings are viewed and analyzed in the local build logs.
    if (isTravis) {
        javadoc {

            // Set the maximum number of Javadoc warnings to print.
            //
            // If the parameter value is zero, all warnings will be printed.
            options.addStringOption('Xmaxwarns', '1')
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Set Java home to point to JDK8 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/

    defaultRepositories(project)
    dependencies {
        errorprone deps.build.errorProneCore
        errorproneJavac deps.build.errorProneJavac
        // For dependencies config. based on version of Java, see:
        //  https://github.com/epeee/junit-jupiter-extension-testing/blob/57b7ba75ab64ed8c229d2a5b14a954d6ae359189/gradle/errorprone.gradle

        implementation deps.build.guava

        //TODO:2018-05-11:alexander.yevsyukov: Replace the below with Checker Framework
        // after Guava fully migrates from it too.
        implementation deps.build.jsr305Annotations

        implementation deps.build.checkerAnnotations
        implementation deps.build.errorProneAnnotations

        implementation deps.build.slf4j

        //Use jdk14 bindings for test purposes only.
        testImplementation deps.test.slf4j
        testImplementation deps.test.hamcrest
        testImplementation deps.test.mockito
        testImplementation deps.test.guavaTestlib
        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner
        testImplementation "io.spine.tools:spine-mute-logging:$spineBaseVersion"
    }

    forceConfiguration(project)
    configurations {
        all {
            resolutionStrategy {
                //noinspection GroovyAssignabilityCheck
                force(
                        "io.spine:spine-base:$spineBaseVersion",
                        "io.spine:spine-time:$spineTimeVersion"
                )
            }
        }
        // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
        runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
        testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"
    }

    sourceSets {
        main {
            proto.srcDirs "$sourcesRootDir/main/proto"
            java.srcDirs generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir
            resources.srcDirs "$generatedRootDir/main/resources"
        }
        test {
            proto.srcDirs "$sourcesRootDir/test/proto"
            java.srcDirs generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir
            resources.srcDirs "$generatedRootDir/test/resources"
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
        }
    }

    apply from: deps.scripts.testOutput
    apply from: deps.scripts.javadocOptions
    
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier.set("sources")
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        archiveClassifier.set("test")
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from ("$projectDir/build/docs/javadoc")
        archiveClassifier.set("javadoc")
    }

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            generatedSourceDirs += file(generatedGrpcDir)
            generatedSourceDirs += file(generatedSpineDir)
            generatedSourceDirs += file(generatedTestJavaDir)
            generatedSourceDirs += file(generatedTestGrpcDir)
            generatedSourceDirs += file(generatedTestSpineDir)

            testSourceDirs += file(generatedTestJavaDir)

            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }

    // Apply the Javadoc publishing plugin.
    // This plugin *must* be applied here, not in the module `build.gradle` files.
    //
    if (shouldPublishJavadoc(project)) {
        apply from: updateDocsPlugin
    }
    
    apply from: deps.scripts.pmd
}

apply from: publishPlugin

// IDEA project configuration.
idea {
    project {
        ipr {
            beforeMerged { final project ->
                project.modulePaths.clear()
            }
            withXml { final provider ->
                provider.node.component
                        .find { it.@name == 'VcsDirectoryMappings' }
                        .mapping.@vcs = 'Git'
            }
        }
    }
}

// Aggregated coverage report across all subprojects.
apply from: spineJacocoScript
