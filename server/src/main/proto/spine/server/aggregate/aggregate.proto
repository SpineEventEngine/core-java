//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.aggregate;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (SPI_all) = true;
option java_package = "io.spine.server.aggregate";
option java_outer_classname = "AggregateProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/event.proto";
import "spine/core/version.proto";

// The message for storing an aggregate snapshot.
message Snapshot {

    // The state of the aggregate.
    google.protobuf.Any state = 1;

    // The version of the aggregate.
    core.Version version = 2;

    // The moment the snapshot was created.
    //
    // This value should normally be after the time the aggregate was modified
    // (and timestamp of the corresponding event), and before the time of
    // the next event in the aggregate history.
    //
    // This field is used when storing a snapshot in `AggregateEventRecord`.
    //
    google.protobuf.Timestamp timestamp = 3;
}

// A record with information about an event or a snapshot of an aggregate.
message AggregateEventRecord {

    // A timestamp of the event or snapshot in this record.
    google.protobuf.Timestamp timestamp = 1;

    oneof kind {
        // An event stored in the record.
        core.Event event = 2;

        // A snapshot of the aggregate.
        server.aggregate.Snapshot snapshot = 3;
    }
}

// The message for restoring an aggregate state.
message AggregateStateRecord {

    // If the `snapshot` field is populated, it contains the last snapshot in
    // the history of the aggregate.
    //
    // This value will be used for restoring the aggregate state before playing
    // events that occurred after this snapshot was made.
    //
    server.aggregate.Snapshot snapshot = 1;

    // Events of the aggregate.
    //
    // If `snapshot` field is populated, events represent the 'tail' of
    // the event history of the aggregate.
    // Otherwise, events are full history of the aggregate.
    //
    repeated core.Event event = 2;
}

