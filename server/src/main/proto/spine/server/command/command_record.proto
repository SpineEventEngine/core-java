//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.command;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (SPI_all) = true;
option java_package = "io.spine.server.commandbus";
option java_multiple_files = true;
option java_outer_classname = "CommandRecordProto";
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";

import "spine/base/error.proto";
import "spine/core/command.proto";
import "spine/core/rejection.proto";

// This type defines the way commands are stored in command storage.
//
// Some of the fields are defined as string representation of corresponding message types
// so that these fields are available for querying.
//
message CommandRecord {
    option (SPI_type) = true;

    // The ID of the command.
    core.CommandId command_id = 1;

    // A short name of Protobuf command type.
    string command_type = 2;

    // The command.
    core.Command command = 3;

    // The status of command processing.
    //
    // This field is empty upon arrival of a command.
    // It is populated later during the command processing cycle.
    //
    ProcessingStatus status = 5;

    // A moment of time when this storage record was created.
    google.protobuf.Timestamp timestamp = 6;
}

// The status of command processing.
message ProcessingStatus {

    // The code of the status.
    core.CommandStatus code = 1;

    // The `cause` provides additional information on what went wrong
    // if the value of `status` is `ERROR` or `REJECTED`.
    oneof cause {
        // The technical error occurred during command processing.
        base.Error error = 2;

        // Why the command was rejected.
        core.Rejection rejection = 3;
    }
}
