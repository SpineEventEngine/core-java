//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.server.entity;

option (type_url_prefix) = "type.spine3.org";
option (SPI_all) = true;
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "EntityProto";
option java_package = "org.spine3.server.entity";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "spine/annotations.proto";
import "spine/base/version.proto";

// The record for passing information about an entity.
message EntityRecord {
    option (SPI_type) = true;

    // The ID of the entity.
    google.protobuf.Any entity_id = 1;

    // The state of the entity.
    google.protobuf.Any state = 2;

    // The version of the entity.
    base.Version version = 3;

    // The lifecycle flags of the entity.
    LifecycleFlags lifecycle_flags = 4;

    // Custom fields of the entity to store in the storage.
    StorageFields storage_fields = 5;
}

// The lifecycle flags of an entity.
message LifecycleFlags {

    // Marks the entity as `archived`.
    //
    // An application may use this flag for filtering out entities
    // that finished their normal lifecycle and are kept in the database
    // for archival purposes.
    //
    bool archived = 1;

    // Marks the entity as `deleted.
    //
    // An application may use this flag for filtering out entities that were
    // put aside (e.g. into a Trash) because they are no longer needed.
    //
    // An application may also use this flag for periodical automatic removal of entities
    // marked with this flag.
    //
    bool deleted = 2;
}

// Custom fields to store in the storage.
//
// These fields should be searchable in an effiefient way.
//
message StorageFields {
    option (SPI_type) = true;

    // The ID of the entity.
    google.protobuf.Any entity_id = 1;

    // A map of the field names to the field values.
    map<string, google.protobuf.Any> fields = 2;
}
