/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.server.catchup;

import "spine/options.proto";
import "spine/time_options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;
option (every_is).java_type = "io.spine.server.delivery.CatchUpSignal";

option java_package = "io.spine.server.delivery.event";
option java_outer_classname = "CatchUpEventsProto";
option java_multiple_files = true;

import "spine/server/catchup/catch_up.proto";

// The catch-up has been requested.
message CatchUpRequested {

    CatchUpId id = 1;

    // A request describing the catch-up properties.
    CatchUp.Request request = 2;
}

// The catch-up has been started.
message CatchUpStarted {

    CatchUpId id = 1;
}

// The next portion of the historical events was read and dispatched to the respective entities.
message HistoryEventsRecalled {

    CatchUpId id = 1;
}

// The whole history of the events was read and dispatched to the respective entities.
message HistoryFullyRecalled {

    CatchUpId id = 1;
}

// The catch-up process has detected the recently dispatched events and has sent them to the
// respective entities.
//
message LiveEventsPickedUp {

    CatchUpId id = 1;
}

// The catch-up process has been completed.
message CatchUpCompleted {

    CatchUpId id = 1;
}
