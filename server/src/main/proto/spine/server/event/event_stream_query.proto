/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.server.event;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "EventStreamQueryProto";
option java_package = "io.spine.server.event";

import "google/protobuf/timestamp.proto";

import "spine/server/event/event_filter.proto";

// A query for events in an `EventStore`.
//
// If the query is empty, all the events are loaded.
//
message EventStreamQuery {
    option (is).java_type = "EventStreamQueryMixin";

    // Include events with timestamp after this value.
    //
    // If this parameter is not specified, all events since the start of
    // the history will be included.
    //
    google.protobuf.Timestamp after = 1;

    // Include events with the timestamp before this value.
    //
    // If this parameter is not specified, all events till the end of
    // the history will be included.
    //
    google.protobuf.Timestamp before = 2;

    // Specification of `Event`s to be included into resulting stream.
    //
    repeated EventFilter filter = 3;

    // Set the limit on the maximum number of events returned in scope of a single query.
    //
    // If this parameter is not specified, the resulting set of events is not restricted in size.
    //
    Limit limit = 4;

    // Definition of the query `LIMIT`.
    //
    // Sets the maximum number of events to return from an `EventStore`.
    //
    message Limit {

        // How many records to return at maximum.
        int32 value = 1 [(min).value = "1"];
    }
}
