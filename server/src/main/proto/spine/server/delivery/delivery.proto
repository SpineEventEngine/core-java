/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.server.delivery;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.server.delivery";
option java_outer_classname = "DeliveryProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

import "spine/server/server_environment.proto";
import "spine/base/error.proto";

// An index of a shard.
//
// A value type used across the application. To be potentially used in JavaScript, Go, C++ and
// other client and server environments, that are split into shards.
message ShardIndex {

    // The zero-based index of the shard.
    int32 index = 1 [(min).value = "0"];

    // Total number of shards.
    int32 of_total = 2 [(min).value = "1"];
}

// A record describing the session in scope of which sharded messages are being processed.
message ShardSessionRecord {

    // The index of a shard processed in this session.
    ShardIndex index = 1 [(required) = true];

    // When the shard processed within the session was last picked by the node.
    //
    // This field is unset if no nodes ever picked the session.
    google.protobuf.Timestamp when_last_picked = 3;

    // An identifier of an application worker, which picked up the shard and processes it.
    //
    // Unset until a worker picks the shard.
    WorkerId worker = 4;

    reserved 2;
    reserved "picked_by";
}

//A stage of the `Delivery` process running for some particular `ShardIndex`.
message DeliveryStage {

    // The index of a shard to which the delivery stage was performed.
    ShardIndex index = 1 [(required) = true, (validate) = true];

    // How many messages were delivered in scope of this stage.
    int32 messagesDelivered = 2 [(min).value = "0"];
}

// A process performing the maintenance of the shard with its messages.
//
// Represented in each of the bounded contexts as an event reactor,
// as it's impossible to have several process managers of the same state across bounded contexts.
message ShardMaintenance {

    ShardIndex id = 1;
}

// An identifier of a worker which processes a shard.
//
// This value is unique across the application. It is used to indicate who is currently processing
// which shard. A single node can contain several workers (typically represented by threads)
// processing different shards.
message WorkerId {

    // A node to which this worker belongs.
    NodeId nodeId = 1 [(required) = true];

    // Worker's identifier.
    //
    // An example of such an identifier could be ID of the thread which processes a shard.
    string value = 2 [(required) = true];
}

// One of the possible outcomes of shard pick-up request stating that the shard is already picked
// by another worker.
message ShardAlreadyPickedUp {

    // A worker that owns the session.
    WorkerId by = 1 [(required) = true];

    // Time when the `worker` has picked the shard.
    //
    // Pay attention this time is not synchronized between servers, the time on each instance is
    // slightly different. So be careful comparing this time (potentially created on a different
    // instance) with the time on the instance when the code is running now.
    //
    google.protobuf.Timestamp when = 2 [(required) = true];
}

// An outcome of the shard pick-up attempt indicating the result.
//
// The outcome contains one of 2 following results:
//
// 1. Shard picked up successfully. In this case the outcome will contain
// a new `ShardSessionRecord`.
//
// 2. Shard could not be picked up as it's already picked by another worker. In this case
// the outcome will contain the `ShardAlreadyPickedUp` messages.
//
message PickUpOutcome {

    option (is).java_type = "io.spine.server.delivery.PickUpOutcomeMixin";

    oneof value {
      option (is_required) = true;

      // Shard delivery session indicating that the shard is successfully picked.
      ShardSessionRecord session = 1;

      // Information about the worker who owns the session, indicates
      // that the shard cannot be picked because it's picked by another worker.
      ShardAlreadyPickedUp already_picked_by = 2;
    }
}
