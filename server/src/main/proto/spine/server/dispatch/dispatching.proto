/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.server.dispatch;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;
option java_package = "io.spine.server.dispatch";
option java_multiple_files = true;
option java_outer_classname = "DispatchProto";

import "google/protobuf/any.proto";

import "spine/base/error.proto";
import "spine/core/command.proto";
import "spine/core/diagnostics.proto";
import "spine/core/event.proto";

// Report of a batch propagation of several signals.
message BatchDispatchOutcome {
    option (is).java_type = "BatchDispatchOutcomeMixin";

    // The ID of the entity handling the signals.
    core.MessageId target_entity = 1  [(required) = true, (validate) = true];

    // The outcomes of separate signal propagation routines.
    //
    // The ordering of the signals is preserved in the ordering of outcomes.
    //
    repeated DispatchOutcome outcome = 2 [(validate) = true];

    // The propagation is successful if none of the `outcome`s is erroneous.
    bool successful = 3;
}

// The result of handling a single signal.
message DispatchOutcome {
    option (is).java_type = "DispatchOutcomeMixin";

    // The ID of the propagated signal.
    core.MessageId propagated_signal = 1 [(required) = true, (validate) = true];

    oneof result {

        // Result of a successful handling.
        //
        // If the handling resulted in signals, commands, events, or a rejection, stores
        // those signals.
        //
        Success success = 2 [(validate) = true];

        // Erroneous handling result.
        base.Error error = 3;

        // Result of the signal handling being interrupted.
        //
        // If many signals are processed in a single transaction, and one of them fails, all
        // the signals which have not yet been processes are marked as interrupted.
        //
        // Contains the ID of the signal which caused the interruption.
        //
        Interruption interrupted = 4 [(validate) = true];

        // Result of a signal being ignored.
        //
        // If field filters of a receptor do not match a given signal, the signal is ignored.
        //
        Ignore ignored = 5 [(validate) = true];

        // The signal has been sent to the inboxes of the corresponding targets.
        //
        // It will be handled as soon as it is delivered.
        //
        InboxAddresses sent_to_inbox = 6;

        // The signal has been published to the remote channel.
        //
        // Typically, it means that the signals of this type were requested
        // by other Bounded Contexts as their `external` subscriptions.
        //
        bool published_to_remote = 7;

        // There were no targets to which the signal could have been dispatched.
        bool no_targets_to_route = 8;
    }
}

// A successful signal handling result.
//
// This message may be empty if:
//   1. The receptor does not return a result by its nature (e.g. a subscribing method), or
//   2. The method returns `Nothing` (wrapped inside a tuple) because the entity ignores the signal.
//      For example, a reacting receptor or a commanding receptor may chose not to produce
//      an outgoing signal in response to incoming event.
//
message Success {
    option (is).java_type = "SuccessMixin";

    oneof exhaust {

        // Events produced by the receptor.
        ProducedEvents produced_events = 1 [(validate) = true];

        // Commands produced by the receptor.
        ProducedCommands produced_commands = 2 [(validate) = true];

        // The rejection produced by the receptor.
        core.Event rejection = 3 [(validate) = true];
    }
}

// Events produced during a signal handling.
//
// Spine supports receptors returning `Optional` values,
// so there may be no produced events.
//
message ProducedEvents {
    option (is).java_type = "ProducedEventsMixin";

    repeated core.Event event = 1 [(validate) = true];
}

// Commands produced during a signal handling.
//
// Spine supports receptors returning `Optional` values,
// so there may be no produced commands.
//
message ProducedCommands {
    option (is).java_type = "ProducedCommandsMixin";

    repeated core.Command command = 1 [(validate) = true];
}

// Signal handling interruption.
message Interruption {
    option (is).java_type = "InterruptionMixin";

    // The message which caused the interruption.
    //
    // Typically, the message which failed the transaction before the associated signal
    // had a chance to be handled.
    //
    core.MessageId stopped_at = 1 [(required) = true, (validate) = true];
}

// Ignored signal handling.
message Ignore {
    option (is).java_type = "IgnoreMixin";

    // The reason why the signal was ignored.
    //
    // Used for debugging.
    //
    string reason = 1 [(required) = true];
}

// The addresses of the entity inboxes,
// to which the message has been sent during dispatching.
//
message InboxAddresses {

    // The identifiers of entity targets,
    // to which inboxes the message has been sent.
    //
    repeated google.protobuf.Any id = 1 [(required) = true, (validate) = true];
}
