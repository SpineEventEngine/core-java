//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server";
option java_outer_classname = "CommandLifecycleProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";

import "spine/core/command.proto";
import "spine/core/response.proto";
import "spine/client/entities.proto";

// The current status of a command in a system.
//
// All the commands in the system have a corresponding lifecycle instance. The only excpetion are
// the commads of the `System` bounded contexts, which do not have an explicit lifecycle.
//
message CommandLifecycle {
    option (entity).kind = AGGREGATE;

    // The ID of the command.
    spine.core.CommandId id = 1;

    // The command.
    spine.core.Command command = 2;

    // The target of the command delivery.
    CommandTarget target = 3;

    // The log of changes of the command.
    CommandTimeline status = 4 [(required) = true];
}

// An identifier of an entity which is the target of a command.
//
message CommandTarget {

    // The ID of the entity which the command is dispatched to.
    spine.client.EntityId entity_id = 1 [(valid) = true];

    // The state type URL of the entity which receives the command.
    string type_url = 2 [(required) = true];
}

// The log of changes of a command status.
//
message CommandTimeline {

    // The instant when the command was received.
    //
    // Effectively, this is the time when the command is posted to the `CommandBus`.
    //
    google.protobuf.Timestamp when_received = 1;

    // The instant when the command is acknowledged by the `CommandBus`.
    google.protobuf.Timestamp when_acknowledged = 2;

    // The instant when the command is scheduled for the last time.
    google.protobuf.Timestamp when_scheduled = 3;

    // The instant when the command is sent to a dispatcher.
    google.protobuf.Timestamp when_dispatched = 4;

    // The instant when the command target is assigned to the command.
    google.protobuf.Timestamp when_target_assgined = 5;

    // The instant when the command processing is completed, successfully or otherwise.
    google.protobuf.Timestamp when_handled = 6 [(goes).with = "how_handled"];

    // The instance when the command was substituted with one or more commands to be
    // handled instead of this one.
    //
    google.protobuf.Timestamp when_substituted = 7 [(goes).with = "substituted"];

    // The status of the command after processing.
    oneof outcome {

        // The command was handled, rejected, or errored.
        spine.core.Status how_handled = 8 [(goes).with = "when_handled"];

        // Other commands were generated instead.
        Substituted substitued = 9 [(goes).with = "when_substituted"];
    }
}

// Describes which command(s) were generated instead of incoming one.
message Substituted {

    oneof kind {
        // One command was generated.
        spine.core.CommandId command = 1;

        // Two or more commands were generated.
        Sequence sequence = 2;
    }

    // A sequence with two or more command IDs of generated commands.
    message Sequence {
        repeated spine.core.CommandId item = 2;
    }
}
