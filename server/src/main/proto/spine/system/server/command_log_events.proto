/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server.event";
option java_outer_classname = "CommandLifecycleEventsProto";
option java_multiple_files = true;

import "spine/base/error.proto";
import "spine/core/command.proto";
import "spine/core/event.proto";
import "spine/system/server/command_log.proto";

// An event emitted when a new command is received by the `CommandBus`.
//
message CommandReceived {

    // The ID of the command.
    core.CommandId id = 1;

    // The command.
    core.Command payload = 2 [(required) = true];
}

// An event emitted when the command is acknowledged by the `CommandBus`.
//
message CommandAcknowledged {

    // The ID of the command.
    core.CommandId id = 1;
}

// An event emitted when the command is scheduled.
//
message CommandScheduled {

    // The ID of the command.
    core.CommandId id = 1;

    // The schedule to execute the command.
    core.CommandContext.Schedule schedule = 2 [(validate) = true];
}

// An event emitted when a command is passed to a dispatcher after being acknowledged.
//
message CommandDispatched {

    // The ID of the command.
    core.CommandId id = 1;
}

// An event emitted when the command target is determined.
//
// This event is emitted before the command is delivered to the target.
//
message TargetAssignedToCommand {

    // The ID of the command.
    core.CommandId id = 1;

    // The target of the command.
    CommandTarget target = 2 [(validate) = true];
}

// An event emitted when a command is successfully handled.
//
message CommandHandled {

    // The ID of the command.
    core.CommandId id = 1;
}

// An event emitted if the command cannot be handled due to a technical error.
//
message CommandErrored {

    // The ID of the command.
    core.CommandId id = 1;

    // The runtime error.
    base.Error error = 2 [(validate) = true];
}

// An event emitted if the command cannot be handled due to a business rejection.
//
message CommandRejected {

    // The ID of the command.
    core.CommandId id = 1;

    // The command rejection event.
    core.Event rejection_event = 2 [(validate) = true];
}

// An event emitted when another command was generated in response to a received command.
//
message CommandTransformed {

    // The ID of the command.
    core.CommandId id = 1;

    // The ID of the command generated in response to the received command.
    core.CommandId produced = 2 [(required) = true];
}

// An event emitted when two or more commands were generated in response to a received command.
message CommandSplit {

    // The ID of the command.
    core.CommandId id = 1;

    // Identifiers of the command generated in response to the received command.
    repeated core.CommandId produced = 2 [(required) = true];
}
