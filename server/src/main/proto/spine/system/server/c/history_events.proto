//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server";
option java_outer_classname = "HistoryEventsProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/event.proto";
import "spine/core/command.proto";
import "spine/system/server/entity_history.proto";
import "spine/server/entity/repository.proto";

// An event emitted when an entity is created.
//
message EntityCreated {

    // The ID of the entity.
    EntityHistoryId id = 1 [(required) = true];

    spine.server.entity.RepositorySpec repository_spec = 2 [(required) = true];
}

// An event emitted when an event is dispatched to a subscriber.
//
// This event is relevant only to histories of Projections.
//
message EventDispatchedToSubscriber {

    // The ID of the entity, which the event is dispatched to.
    EntityHistoryId receiver = 1 [(required) = true];

    // The info about the event.
    DispatchedEvent payload = 2 [(required) = true, (valid) = true];
}

// An event emitted when an event is dispatched to a reactor.
//
// This event is relevant to histories of Aggregates and ProcessManagers.
//
message EventDispatchedToReactor {

    // The ID of the entity, which the event is dispatched to.
    EntityHistoryId receiver = 1 [(required) = true];

    // The info about the event.
    DispatchedEvent payload = 2 [(required) = true, (valid) = true];
}

// An event emitted when a command is dispatched to a command handler.
//
// This event is relevant only to histories of Aggregates and ProcessManagers.
//
message CommandDispatchedToHandler {

    // The ID of the entity, which the command is dispatched to.
    EntityHistoryId receiver = 1 [(required) = true];

    // The info about the command.
    DispatchedCommand payload = 2 [(required) = true, (valid) = true];
}

// An event emitted when an entity state is changed.
//
// The event contains the new state of the entity.
//
message EntityStateChanged {

    // The ID of the entity.
    EntityHistoryId id = 1 [(required) = true];

    // The new state of the entity.
    google.protobuf.Any new_state = 2 [(required) = true];

    // The IDs of the messages which caused the mutation.
    repeated DispatchedMessageId message_id = 3;

    // The instant when the entity was archived.
    google.protobuf.Timestamp when = 4;
}

// An event emitted when an entity is marked as archived.
//
message EntityArchived {

    // The ID of the entity.
    EntityHistoryId id = 1 [(required) = true];

    // The IDs of the messages which caused the mutation.
    repeated DispatchedMessageId message_id = 2;

    // The instant when the entity was archived.
    google.protobuf.Timestamp when = 3;
}

// An event emitted when an entity is marked as deleted.
//
message EntityDeleted {

    // The ID of the entity.
    EntityHistoryId id = 1 [(required) = true];

    // The IDs of the messages which caused the mutation.
    repeated DispatchedMessageId message_id = 2;

    // The instant when the entity was deleted.
    google.protobuf.Timestamp when = 3;
}

// An event emitted when an entity is marked as NOT archived.
//
message EntityExtractedFromArchive {

    // The ID of the entity.
    EntityHistoryId id = 1 [(required) = true];

    // The IDs of the messages which caused the mutation.
    repeated DispatchedMessageId message_id = 2;

    // The instant when the entity was extracted.
    google.protobuf.Timestamp when = 3;
}

// An event emitted when an entity is marked as NOT deleted.
//
message EntityRestored {

    // The ID of the entity.
    EntityHistoryId id = 1 [(required) = true];

    // The IDs of the messages which caused the mutation.
    repeated DispatchedMessageId message_id = 2;

    // The instant when the entity was restored.
    google.protobuf.Timestamp when = 3;
}
