/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.system.server;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option (internal_all) = true;

option java_package = "io.spine.system.server.event";
option java_outer_classname = "EntityLogEventsProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/diagnostics.proto";
import "spine/core/command.proto";
import "spine/core/event.proto";
import "spine/core/version.proto";
import "spine/system/server/entity_type.proto";

// An entity was created.
message EntityCreated {

    // The ID of the entity.
    core.MessageId entity = 1 [(required) = true];

    // The kind of the entity.
    EntityOption.Kind kind = 2 [(required) = true];
}

// An event is dispatched to a subscriber.
//
// This event is relevant only to histories of Projections.
//
message EventDispatchedToSubscriber {
    option (is).java_type = "EventDispatchedMixin";

    // The ID of the entity, which the event is dispatched to.
    core.MessageId receiver = 1 [(required) = true];

    // The dispatched event.
    core.Event payload = 2 [(validate) = true];

    // The time when the event was dispatched.
    //
    // This timestamp may differ from the one in the context of the event, since the time of
    // dispatching may not be the same as the time of creation.
    //
    google.protobuf.Timestamp when_dispatched = 3 [(required) = true];

    // The fully qualified name of the subscribing entity.
    EntityTypeName entity_type = 4 [(required) = true];
}

// An event was dispatched to a reactor.
//
// This event is relevant to histories of Aggregates and ProcessManagers.
//
message EventDispatchedToReactor {
    option (is).java_type = "EventDispatchedMixin";

    // The ID of the entity, which the event is dispatched to.
    core.MessageId receiver = 1 [(required) = true];

    // The dispatched event.
    core.Event payload = 2 [(validate) = true];

    // The time when the event was dispatched.
    //
    // This timestamp may differ from the one in the context of the event, since the time of
    // dispatching may not be the same as the time of creation.
    //
    google.protobuf.Timestamp when_dispatched = 3 [(required) = true];

    // The fully qualified name of the reacting entity.
    EntityTypeName entity_type = 4 [(required) = true];
}

// A command was dispatched to a command handler.
//
// This event is relevant only to histories of Aggregates and ProcessManagers.
//
message CommandDispatchedToHandler {
    option (is).java_type = "CommandDispatchedMixin";

    // The ID of the entity, which the command is dispatched to.
    core.MessageId receiver = 1 [(required) = true];

    // The dispatched command.
    core.Command payload = 2 [(validate) = true];

    // The time when the command was dispatched.
    //
    // This timestamp may differ from the one in the context of the event, since the time of
    // dispatching may not be the same as the time of creation.
    //
    google.protobuf.Timestamp when_dispatched = 3 [(required) = true];

    // The fully qualified name of the handling entity.
    EntityTypeName entity_type = 4 [(required) = true];
}

// An event was imported into an aggregate.
message EventImported {
    option (is).java_type = "EventDispatchedMixin";

    // The ID of the aggregate, which imported the event.
    core.MessageId receiver = 1 [(required) = true];

    // The dispatched event.
    core.Event payload = 2 [(validate) = true];

    // The time when the event was imported.
    google.protobuf.Timestamp when_imported = 3 [(required) = true, (validate) = true];

    // The fully qualified name of the receiver aggregate.
    EntityTypeName entity_type = 4 [(required) = true];
}

// A state of an entity has changed.
//
// The event transfers both "old" and "new" states of the entity to allow the further
// distinction for the subscribers.
//
message EntityStateChanged {
    option (is).java_type = "EntityLifecycleEvent";

    // The ID of the entity.
    core.MessageId entity = 1 [(required) = true];

    // The old state of the entity.
    //
    // May be empty if the entity has just been created.
    //
    google.protobuf.Any old_state = 6;

    // The new state of the entity.
    google.protobuf.Any new_state = 2 [(required) = true];

    // The IDs of the signals which caused the mutation.
    repeated core.MessageId signal_id = 3 [(required) = true, (validate) = true];

    // The instant when the entity was changed.
    google.protobuf.Timestamp when = 4;

    // The new version of the entity.
    core.Version new_version = 5;
}

// An entity was marked as archived.
message EntityArchived {
    option (is).java_type = "EntityLifecycleEvent";

    // The ID of the entity.
    core.MessageId entity = 1 [(required) = true];

    // The IDs of the signals which caused the mutation.
    repeated core.MessageId signal_id = 2 [(required) = true, (validate) = true];

    // The instant when the entity was archived.
    google.protobuf.Timestamp when = 3;

    // The version received by the entity upon archiving.
    core.Version version = 4;
}

// An entity was either marked as deleted or had its record physically removed from the storage.
message EntityDeleted {
    option (is).java_type = "EntityLifecycleEvent";

    // The ID of the entity.
    core.MessageId entity = 1 [(required) = true];

    // The IDs of the signals which caused the mutation.
    repeated core.MessageId signal_id = 2 [(required) = true, (validate) = true];

    // The instant when the entity was deleted.
    google.protobuf.Timestamp when = 3;

    // The version received by the entity upon deletion.
    core.Version version = 4;

    oneof deletion {

        // The entity was marked as deleted.
        bool marked_as_deleted = 5;

        // The entity record was physically removed from the storage.
        bool removed_from_storage = 6;
    }
}

// An entity was marked as NOT archived.
message EntityUnarchived {
    option (is).java_type = "EntityLifecycleEvent";

    // The ID of the entity.
    core.MessageId entity = 1 [(required) = true];

    // The IDs of the signals which caused the mutation.
    repeated core.MessageId signal_id = 2 [(required) = true, (validate) = true];

    // The instant when the entity was extracted.
    google.protobuf.Timestamp when = 3;

    // The version received by the entity upon extraction.
    core.Version version = 4;
}

// An entity was marked as NOT deleted.
message EntityRestored {
    option (is).java_type = "EntityLifecycleEvent";

    // The ID of the entity.
    core.MessageId entity = 1 [(required) = true];

    // The IDs of the signals which caused the mutation.
    repeated core.MessageId signal_id = 2 [(required) = true, (validate) = true];

    // The instant when the entity was restored.
    google.protobuf.Timestamp when = 3;

    // The version received by the entity upon restoration.
    core.Version version = 4;
}

// A migration operation was applied to an entity.
message MigrationApplied {
    option (is).java_type = "EntityLifecycleEvent";

    // The ID of the entity.
    core.MessageId entity = 1 [(required) = true];

    // The instant when the migration was applied.
    google.protobuf.Timestamp when = 2;
}
