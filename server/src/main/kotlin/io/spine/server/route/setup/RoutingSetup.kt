/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.server.route.setup

import io.spine.base.Routable
import io.spine.core.SignalContext
import io.spine.server.entity.Entity
import io.spine.server.route.MessageRouting

/**
 * This is a base interface for classes generated by Spine Compiler for routing schemas
 * defined using the [@Route][io.spine.server.route.Route] annotation.
 *
 * A class implementing this interface will be used by a repository for defining a routing schema
 * when its [setup] function is invoked.
 *
 * The setup class is matched to the repository using the result of the [entityClass] function.
 *
 * @param I The type of the identifiers of the target entities.
 * @param M The type of routed messages.
 * @param S The type of the context of the routed messages.
 * @param R The type of the result of routing functions participated in the schema.
 * @param U The type of the routing schema filled by the setup class.
 */
public interface RoutingSetup<
        I : Any,
        M : Routable,
        C : SignalContext,
        R : Any,
        U : MessageRouting<I, M, C, R, U>> {

    /**
     * Obtains the class of the served entities.
     */
    public fun entityClass(): Class<out Entity<I, *>>

    /**
     * Populates the given routing schema with the entries for custom routes.
     */
    public fun setup(routing: U)
}
