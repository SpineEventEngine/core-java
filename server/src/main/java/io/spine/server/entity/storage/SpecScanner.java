/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.server.entity.storage;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableSet;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.protobuf.Any;
import io.spine.annotation.Internal;
import io.spine.base.EntityState;
import io.spine.base.Identifier;
import io.spine.client.ArchivedColumn;
import io.spine.query.Column;
import io.spine.query.Column.Getter;
import io.spine.query.EntityColumn;
import io.spine.query.RecordColumn;
import io.spine.server.entity.Entity;
import io.spine.server.entity.EntityRecord;
import io.spine.server.entity.model.EntityClass;
import io.spine.server.storage.RecordSpec;
import io.spine.server.storage.RecordSpec.ExtractId;
import org.checkerframework.checker.nullness.qual.NonNull;
import org.checkerframework.checker.nullness.qual.Nullable;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import static com.google.common.base.Preconditions.checkNotNull;
import static io.spine.protobuf.AnyPacker.unpack;
import static io.spine.util.Exceptions.newIllegalStateException;
import static java.util.Objects.requireNonNull;

/**
 * Scans Proto definitions of Entities and their states, and determines
 * the {@linkplain RecordSpec record specification} for storage.
 *
 * <p>The resulting spec includes both the entity state-based columns declared with
 * {@link io.spine.option.OptionsProto#column (column)} Proto option, and the columns
 * storing lifecycle and version attributes of an {@code Entity}.
 *
 * @implNote Client-side API includes generic definitions of lifecycle and version columns
 *         (such as {@link ArchivedColumn}). However, their code cannot depend on the {@code Entity}
 *         type directly, as the {@code client} module has no dependency on {@code server} module.
 *         Therefore, this column scanning process wires those generic column definitions with an
 *         actual {@code Entity} type, instances of which serve as a data source for each column.
 *         Also, instead of scanning the {@code (column)} options from an entity state
 *         {@code Message} directly, this scanner uses a Spine compiler-generated shortcut method
 *         called {@code definitions()} which returns the set of {@link EntityColumn}s.
 *         Such an approach improves the scanning performance and preserve the types of generic
 *         parameters code-generated for each {@code EntityColumn}.
 */
@Internal
@SuppressWarnings("Immutable") //// TODO:alex.tymchenko:2023-10-28: address!
public final class SpecScanner {

    /**
     * The name of the nested class generated by the Spine compiler as a container of
     * the entity column definitions.
     */
    @SuppressWarnings("DuplicateStringLiteralInspection")   // coincidental duplication
    private static final String COLS_NESTED_CLASSNAME = "Column";

    /**
     * The name of the method inside the column container class generated by the Spine compiler.
     *
     * <p>The method returns all the definitions of the columns for this state class.
     */
    private static final String COL_DEFS_METHOD_NAME = "definitions";

    /**
     * Prevent this utility from direct instantiation.
     */
    private SpecScanner() {
    }

    /**
     * Determines the specification of the passed entity
     * by the types of its ID and state.
     *
     * <p>The resulting specification is composed in relation
     * to storing Entity as {@code EntityRecord}, along with some columns.
     *
     * @param idClass
     *         type of Entity identifiers
     * @param stateClass
     *         type of Entity state
     * @param <I>
     *         type of Entity identifiers, as bounding generic parameter
     * @param <S>
     *         type of Entity state, bounded with {@code I}
     *         as a type of its identifier
     * @return a new record specification
     */
    @Internal
    @VisibleForTesting
    public static <I, S extends EntityState<I>> RecordSpec<I, EntityRecord>
    scan(Class<I> idClass, Class<S> stateClass) {
        Set<RecordColumn<EntityRecord, ?>> accumulator = new HashSet<>();

        var unpacker = new MemoizingUnpacker<>(stateClass);
        var stateColumns = stateColumns(stateClass);
        for (var stateCol : stateColumns) {
            var columnName = stateCol.name();
            var columnType = castObject(stateCol);
            var recordColumn = new RecordColumn<>(columnName, columnType,
                                                  getter(stateCol, unpacker));
            accumulator.add(recordColumn);
        }

        accumulator.add(EntityRecordColumn.archived);
        accumulator.add(EntityRecordColumn.deleted);
        accumulator.add(EntityRecordColumn.version);

        var result = new RecordSpec<>(
                idClass, EntityRecord.class, idFromRecord(), ImmutableSet.copyOf(accumulator)
        );
        return result;
    }

    /**
     * Determines the specification of the passed entity
     * by the Entity instance.
     *
     * <p>The resulting specification is composed in relation
     * to storing Entity as {@code EntityRecord}, along with some columns.
     *
     * @param entity
     *         entity to scan
     * @param <I>
     *         type of Entity identifiers, as bounding generic parameter
     * @param <S>
     *         type of Entity state, bounded with {@code I}
     *         as a type of its identifier
     * @return a new record specification
     */
    @SuppressWarnings("unchecked" /* Casts are ensured by `Entity` declaration. */)
    public static <I, S extends EntityState<I>>
    RecordSpec<I, EntityRecord> scan(Entity<I, S> entity) {
        checkNotNull(entity);
        var entityCls = (Class<Entity<I, S>>) entity.getClass();
        return scan(entityCls);
    }

    /**
     * Determines the specification of the passed entity
     * by the passed Entity class.
     *
     * <p>The resulting specification is composed in relation
     * to storing Entity as {@code EntityRecord}, along with some columns.
     *
     * @param cls
     *         entity class to scan
     * @param <I>
     *         type of Entity identifiers, as bounding generic parameter
     * @param <S>
     *         type of Entity state, bounded with {@code I}
     *         as a type of its identifier
     * @return a new record specification
     */
    public static <I, S extends EntityState<I>>
    RecordSpec<I, EntityRecord> scan(Class<? extends Entity<I, S>> cls) {
        checkNotNull(cls);
        var idClass = EntityClass.<I>idClass(cls);
        var stateClass = EntityClass.<S>stateClassOf(cls);
        return scan(idClass, stateClass);
    }

    @SuppressWarnings("unchecked")
    private static <I, S extends EntityState<I>>
    Class<Object> castObject(Column<S, ?> stateCol) {
        return (Class<Object>) stateCol.type();
    }

    /**
     * Unpacks Entity states from {@code Any} instances, caching the unpacked results.
     *
     * <p>This routine is used as a scoped cache for on-the-fly unpacking Entity state
     * from {@code EntityRecord}s, and then passing them on to other operations,
     * such as determining the column values.
     *
     * @param <I>
     *         type of entit
     * @param <S>
     */
    private static final class MemoizingUnpacker<I, S extends EntityState<I>> {

        private final Class<S> stateCls;

        private final Map<Any, S> cache = new HashMap<>();

        private MemoizingUnpacker(Class<S> cls) {
            stateCls = cls;
        }

        private synchronized S process(Any value) {
            @Nullable S alreadyUnpacked = cache.get(value);
            if (alreadyUnpacked != null) {
                return alreadyUnpacked;
            }
            var state = unpack(value, stateCls);
            cache.put(value, state);
            return state;
        }
    }

    @SuppressWarnings("ReturnOfNull" /* By design. */)
    private static <I, S extends EntityState<I>>
    Getter<EntityRecord, Object> getter(Column<S, ?> stateColumn,
                                        MemoizingUnpacker<I, S> unpacker) {
        return r -> {
            var state = r.getState();
            if (state.equals(Any.getDefaultInstance())) {
                // This may happen for `Aggregate` state,
                // if its visibility does not allow querying.
                return null;
            }
            var value = stateColumn.valueIn(unpacker.process(state));
            return requireNonNull(value);
        };
    }

    @NonNull
    private static <I> ExtractId<EntityRecord, I> idFromRecord() {
        return new ExtractId<>() {
            @SuppressWarnings("unchecked")
            @CanIgnoreReturnValue
            @Override
            public I apply(@Nullable EntityRecord input) {
                requireNonNull(input);
                return (I) Identifier.unpack(input.getEntityId());
            }
        };
    }

    /**
     * Obtains the {@linkplain EntityColumn entity-state-based} columns of the class.
     */
    @SuppressWarnings("OverlyBroadCatchBlock")   /* Treating all exceptions equally. */
    private static <S extends EntityState<?>> Set<Column<S, ?>> stateColumns(Class<S> stateClass) {
        var columnClass = findColumnsClass(stateClass);
        if (columnClass == null) {
            return ImmutableSet.of();
        }
        try {
            var getDefinitions = columnClass.getDeclaredMethod(COL_DEFS_METHOD_NAME);
            @SuppressWarnings("unchecked")  // ensured by the Spine code generation.
            var columns = (Set<EntityColumn<S, ?>>) getDefinitions.invoke(null);
            return ImmutableSet.copyOf(columns);
        } catch (Exception e) {
            throw newIllegalStateException(
                    e,
                    "Error fetching the declared columns by invoking the `%s.%s()` method" +
                            " of the entity state type `%s`.",
                    COLS_NESTED_CLASSNAME, COL_DEFS_METHOD_NAME, stateClass.getName());
        }
    }

    /**
     * Finds the {@code Column} class which is generated the messages representing the entity
     * state type.
     *
     * <p>If an entity has no such class generated, it does not declare any columns. In this
     * case, this method returns {@code null}.
     *
     * @param stateClass
     *         the class of the entity state to look for the method in
     * @return the class declaring the entity columns,
     *         or {@code null} if the entity declares no columns
     */
    private static @Nullable Class<?> findColumnsClass(Class<?> stateClass) {
        var innerClasses = stateClass.getDeclaredClasses();
        Class<?> columnClass = null;
        for (var aClass : innerClasses) {
            if (COLS_NESTED_CLASSNAME.equals(aClass.getSimpleName())) {
                columnClass = aClass;
            }
        }
        return columnClass;
    }
}
