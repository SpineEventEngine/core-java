//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.test.event;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package="io.spine.test.event";
option java_outer_classname = "EventEventsProto";
option java_multiple_files = true;

import "spine/core/user_id.proto";
import "spine/test/event/project.proto";

message ProjectCreated {
    ProjectId project_id = 1;

    message Enrichment {
        string project_name = 1 [(by) = "project_id"];

        core.UserId owner_id = 2 [(by) = "project_id"];
    }
}

message ProjectCreatedSeparateEnrichment {
    option (enrichment_for) = "ProjectCreated";

    string project_name = 1 [(by) = "project_id"];
}

message ProjectCreatedDynamicallyConfiguredEnrichment {
    option (enrichment_for) = "ProjectCreated";

    int32 max_member_count = 1 [(by) = "project_id"];
}

message TaskAdded {
    ProjectId project_id = 1;

    Task task = 2;
}

message ProjectStarted {
    ProjectId project_id = 1;

    message Enrichment {
        string project_name = 1 [(by) = "project_id", (required) = true];
    }
}

message EnrichmentForSeveralEvents {
    option (enrichment_for) = "ProjectCreated,"
                              "ProjectStarted,"
                              "TaskAdded";

    string project_name = 1 [(by) = "project_id"];
}

message EnrichmentByContextFields {
    option (enrichment_for) = "ProjectCreated";

    string by_timestamp = 1 [(by) = "context.timestamp"];

    string by_command_context = 2 [(by) = "context.command_context"];

    string by_producer_id = 3 [(by) = "context.producer_id"];

    string by_version = 4 [(by) = "context.version"];

    string by_event_field = 5 [(by) = "project_id"];
}

message ProjectCompleted {
    option (enrichment) = "SeparateEnrichmentForMultipleProjectEvents";

    ProjectId project_id = 1;
}

message ProjectStarred {
    option (enrichment) = "SeparateEnrichmentForMultipleProjectEvents";

    ProjectId project_id = 1;
}

message SeparateEnrichmentForMultipleProjectEvents {
    string project_name = 1 [(by) = "*.project_id"];
}
