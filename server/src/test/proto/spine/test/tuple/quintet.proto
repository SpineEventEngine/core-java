/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.tuple.quintet;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package="io.spine.test.tuple.quintet";
option java_outer_classname = "QuintentProto";
option java_multiple_files = true;

// Test environment data classes for testing `Quintet` tuple.
//
// These types are defined to have test data other than default Protobuf types, and for some fun.
// In real life `Quintet` should contain event messages, and not value objects of some kind.
//
// See https://en.wikipedia.org/wiki/String_quintet for string quintet definitions.
//

//
// A number of instrument in a quintet.
//
// The number is applicable if there are two instruments of such kind in a quintent.
//
message InstrumentNumber {

    // Valid values are `1` and `2`.
    uint32 value = 1 [(min).value = "1", (max).value = "2"];
}

message Viola {

    // Has the default value in cello quintent and `1` and `2` in viola quintent.
    InstrumentNumber number = 1;
        // Since we do not put `valid` option here, the validation framework would accept
        // the default value when validating the instrument.

    // Must be `true` if `number` is not set.
    bool single = 2;
}

message Violin {

    // A violin has alwas a number in both cello and viola quintets.
    // Cannot be zero.
    InstrumentNumber number = 1 [(validate) = true];
}

message ViolinCello {

    // Has the default value in a viola quintent and `1` and `2` in cello quintent.
    InstrumentNumber number = 1;
        // Since we do not put `valid` option here, the validation framework would accept
        // the default value when validating the instrument.

    // Must be `true` if `number` is not set.
    bool single = 2;
}
