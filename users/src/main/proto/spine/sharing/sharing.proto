//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.sharing;

option (type_url_prefix) = "type.spine3.org";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "SharingProto";
option java_package = "org.spine3.sharing";

import "spine/annotations.proto";
import "spine/users/user_id.proto";
import "spine/users/group.proto";

// Definition of specific people who can access a shared object.
//
// An object can be shared with a user or a group of users.
//
message Subject {
    oneof kind {

        // A user with the ID can access.
        users.UserId user = 1;

        // A user belonging to the group with the ID can access.
        users.GroupId group = 2;
    }
}

// Access level to a shared object.
enum AccessLevel {

    // No access to the object.
    NONE = 0;

    // Ability to view the object.
    VIEWER = 1;

    // Ability to comment on the object.
    COMMENTATOR = 2;

    // Ability to modify the object.
    EDITOR = 3;

    // Ability to grant, modify, and deny access to the object for regular users.
    MODERATOR = 4;

    // Ability to grant, modify, and deny access to the object for administrators of the object.
    ADMINISTRATOR = 5;

    // Ability to perform all operations on the object.
    OWNER = 6;
}

// Visibility of a shared object.
enum Visibility {

    // The object is not visible.
    INVISIBLE = 0;

    // The object is visible via its link and is not available in search results.
    LINK = 1;

    // The object is available in search results.
    SEARCH = 2;
}

// A definition of access level for an organization or any user of the system.
message IndirectPermission {

    // A level of visibility.
    Visibility visibility = 1;

    // A level of access.
    AccessLevel level = 2;
}

// Access level for a single subject.
//
// It is assumed that a permission opens an object via `Visibility.LINK`.
//
message Permission {

    // Who can access the object.
    Subject subject = 1;

    // A level of access.
    AccessLevel level = 2;
}

// Access levels for multiple subjects.
message Permissions {
    repeated Permission permission = 1;
}

// Definition of sharing of an object.
//
// An object can be shared to a wide audience (such as organization or all users of the system),
// or only to specific people.
//
// The object can:
//   1. have own sharing settings;
//   2. inherit sharing from its parent;
//   3. have combination of sharing settings form parent and those defined in the object.
//
// If a subject is not added to sharing settings of an object, the level is `AccessLevel.NONE`.
//
// In order to override a permission granted at the parent level, add a permission with
// the required level.
// For example, to disable access granted at the parent, add the permission with `AccessLevel.NONE`.
//
message SharingSettings {

    // If set, sharing settings for this object will be based on those from the parent object.
    bool take_from_parent = 1;

    // Settings specific to this object.
    //
    // If `take_from_parent` is `true` these settings will be applied over those from the parent.
    // If `take_from_parent` is `false`, this field contains full set of the sharing settings.
    //
    Settings settings = 2;

    message Settings {
        oneof audience {
            // All users of the system can access.
            IndirectPermission public = 1;

            // All organization members can access.
            IndirectPermission organization = 2;

            // Only specific people can access.
            Permissions specific_people = 3;
        }
    }
}
