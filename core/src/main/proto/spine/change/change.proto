//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.change;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "ChangeProto";
option java_package = "io.spine.change";

import "google/protobuf/timestamp.proto";

import "spine/time/time.proto";

//
// This file provides messages that define changes of fields in other messages.
// The `Change` messages can be use as a request to change a value (e.g. as a field of a command),
// or as information on the change made (e.g. as a part of an event).
//
// For all types the following rule apply: `new_value` field must not be equal to `previous_value`.
//

// Definition of a change in a string field.
message StringChange {

    // The value of the field that's changing.
    //
    // This field is blank if the target field is blank too.
    //
    string previous_value = 1;

    // The new value of the field.
    //
    // This field must be populated. If you want to clear a field, use a special command.
    // We encourage separate commands for removal to make event handlers more straightforward.
    // Usually removal of a value and changing a value should have different consequences.
    // Hence separate handles.
    //
    string new_value = 2 [(required) = true];
}

// Definition of a change in a `Timestamp` field.
message TimestampChange {

    // The value of the field that's changing.
    google.protobuf.Timestamp previous_value = 1;

    // The new value of the field.
    google.protobuf.Timestamp new_value = 2;
}

// Definition of a change in a `double` field.
message DoubleChange {

    // The value of the field that's changing.
    double previous_value = 1;

    // The new value of the field.
    double new_value = 2;
}

// Definition of a change in a `float` field.
message FloatChange {

    // The value of the field that's changing.
    float previous_value = 1;

    // The new value of the field.
    float new_value = 2;
}

// Definition of a change in a `int32` field.
message Int32Change {

    // The value of the field that's changing.
    int32 previous_value = 1;

    // The new value of the field.
    int32 new_value = 2;
}

// Definition of a change in a `int64` field.
message Int64Change {

    // The value of the field that's changing.
    int64 previous_value = 1;

    // The new value of the field.
    int64 new_value = 2;
}

// Definition of a change in a `uint32` field.
message UInt32Change {

    // The value of the field that's changing.
    uint32 previous_value = 1;

    // The new value of the field.
    uint32 new_value = 2;
}

// Definition of a change in a `uint64` field.
message UInt64Change {

    // The value of the field that's changing.
    uint64 previous_value = 1;

    // The new value of the field.
    uint64 new_value = 2;
}

// Definition of a change in a `sint32` field.
message SInt32Change {

    // The value of the field that's changing.
    sint32 previous_value = 1;

    // The new value of the field.
    sint32 new_value = 2;
}

// Definition of a change in a `sint64` field.
message SInt64Change {

    // The value of the field that's changing.
    sint64 previous_value = 1;

    // The new value of the field.
    sint64 new_value = 2;
}

// Definition of a change in a `fixed32` field.
message Fixed32Change {

    // The value of the field that's changing.
    fixed32 previous_value = 1;

    // The new value of the field.
    fixed32 new_value = 2;
}

// Definition of a change in a `fixed64` field.
message Fixed64Change {

    // The value of the field that's changing.
    fixed64 previous_value = 1;

    // The new value of the field.
    fixed64 new_value = 2;
}

// Definition of a change in a `sfixed32` field.
message Sfixed32Change {

    // The value of the field that's changing.
    sfixed32 previous_value = 1;

    // The new value of the field.
    sfixed32 new_value = 2;
}

// Definition of a change in a `sfixed64` field.
message Sfixed64Change {

    // The value of the field that's changing.
    sfixed64 previous_value = 1;

    // The new value of the field.
    sfixed64 new_value = 2;
}

// Definition of a change in a `bool` field.
message BooleanChange {

    // The value of the field that's changing.
    bool previous_value = 1;

    // The new value of the field.
    bool new_value = 2;
}

// Definition of a change in a `bytes` field.
message BytesChange {

    // The value of the field that's changing.
    bytes previous_value = 1;

    // The new value of the field.
    bytes new_value = 2 [(required) = true];
}

//
// Changes of date/time values.
//--------------------------------

// Definition of an interval change.
message IntervalChange {

    // The value of the field that's changing.
    time.Interval previous_value = 1;

    // The new value of the field.
    time.Interval new_value = 2;
}

// Definition of a change of `LocalDate` fields.
message LocalDateChange {

    // The value of fields that are changing.
    time.LocalDate previous_value = 1;

    // The new value of fields.
    time.LocalDate new_value = 2;
}

// Definition of a change of `LocalTime` fields.
message LocalTimeChange {

    // The value of fields that are changing.
    time.LocalTime previous_value = 1;

    // The new value of fields.
    time.LocalTime new_value = 2;
}

// Definition of a change of `OffsetTime` fields.
message OffsetTimeChange {

    // The value of fields that are changing.
    time.OffsetTime previous_value = 1;

    // The new value of fields.
    time.OffsetTime new_value = 2;
}

// Definition of a change of `OffsetDate` fields.
message OffsetDateChange {

    // The value of fields that are changing.
    time.OffsetDate previous_value = 1;

    // The new value of fields.
    time.OffsetDate new_value = 2;
}

// Definition of a change of `OffsetDateTime` fields.
message OffsetDateTimeChange {

    // The value of fields that are changing.
    time.OffsetDateTime previous_value = 1;

    // The new value of fields.
    time.OffsetDateTime new_value = 2;
}

