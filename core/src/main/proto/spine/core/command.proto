//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.core;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.core";
option java_outer_classname = "CommandProto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";

import "spine/core/actor_context.proto";

// Command identifier.
message CommandId {
    string uuid = 1;
}

// `Command` is an instruction to do something.
//
// A command consists of two parts: command message and command context.
//
// The `message` is the domain model part of command. The type of the command is defined by
// the type of its message. When we speak about a 'command' as a typed thing, we refer to
// the message of the command.
//
// The context contains attributes common for all commands.
//
// A command can hold any valid Protobuf message, but in most cases, it would be a type
// defined in `commands.proto` file of the corresponding aggregate or process manager.
//
// There should be one and only one command handler associated with the type of the command.
//
message Command {

    // The ID of the command.
    CommandId id = 1 [(required) = true];

    // The message of the command wrapped into `Any`.
    google.protobuf.Any message = 2 [(required) = true];

    // Service information about the environment in which the command was created.
    CommandContext context = 3 [(required) = true];

    // Properties that may be set by the framework as the command is delivered and handled.
    //
    // All fields of this type are reserved for internal framework needs, and are not visible to
    // the business logic code of an application.
    //
    message SystemProperties {

        option (internal_type) = true;

        reserved 1 to 10; // for future priority properties.

        // The time when the command was scheduled.
        // Is set automatically and used only by Spine when re-scheduling a command.
        google.protobuf.Timestamp scheduling_time = 11;

        reserved 12 to 20; // for other scheduling-related properties.
    }

    // Service information used by the framework.
    SystemProperties system_properties = 4 [(internal) = true];
}

// Meta-information about the command and the environment, which generated the command.
message CommandContext {

    // Information about the environment of the user who created the command.
    ActorContext actor_context = 1 [(required) = true];

    // The version of the entity for which this command is intended.
    //
    // A client app may not fill in this attribute if the command applies to
    // any version of the entity.
    //
    int32 target_version = 2;

    // Domain-specific attributes of a command.
    //
    // One of the usage scenarios for this field is adding attributes common for several commands.
    //
    map<string, google.protobuf.Any> attributes = 3;

    // A command may be scheduled. This type defines scheduling options.
    message Schedule {

        // The delay between the moment of receiving a command at the server
        // and its delivery to the target.
        google.protobuf.Duration delay = 1;

        //TODO:2016-05-27:alexander.yevsyukov: Have an option for defining schedule at a specific date/time.
        // Name the field `at`;

        //TODO:2016-05-27:alexander.yevsyukov: Have an option for recurrence.
        // Name the field `every`.
    }

    // The schedule to execute the command.
    Schedule schedule = 4;
}

// Enumeration of possible errors when validating a command.
enum CommandValidationError {

    // Reserved value.
    UNKNOWN = 0;

    // The command type is not supported by the server.
    UNSUPPORTED_COMMAND = 1;

    // The command message is invalid according to custom Protobuf options set.
    INVALID_COMMAND = 2;

    // The command context does not have `tenant_id` attribute defined
    // in a multi-tenant application.
    TENANT_UNKNOWN = 3;

    // The command context has non-default value of `tenant_id` in the command sent
    // to a single-tenant application.
    TENANT_INAPPLICABLE = 4;

    // The scheduled command was not delivered to the target in time.
    EXPIRED = 5;
}

// This enumeration defines possible statuses of command processing.
enum CommandStatus {

    // Reserved value.
    UNDEFINED = 0;

    // The command has been received by backend and stored.
    RECEIVED = 1;

    // The command has been received by backend and stored,
    // but will be delivered to the target later.
    SCHEDULED = 2;

    // The command has been successfully handled.
    // Expect one or more events produced in as the result of handling this command.
    OK = 3; // We name this status with such a short text (e.g. instead of `HANDLED`)
            // so that an abnormal command status is more visible in diagnostic messages.

    // There was an exception or another kind of technical error during command processing.
    ERROR = 4;

    // A command was rejected during processing. No events were generated.
    REJECTED = 5;
}
