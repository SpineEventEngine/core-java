//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.core;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.core";
option java_multiple_files = true;
option java_outer_classname = "EventProto";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

import "spine/core/command.proto";
import "spine/core/version.proto";
import "spine/core/enrichment.proto";

// Event identifier.
message EventId {

    // An event is generated in response to a message. The event ID is based on the value of the
    // incoming message:
    //
    //     `<originId>-<sequenceNumber>`
    //
    // where the `sequenceNumber` is a number in the sequence of events generated in response to
    // the incoming message.
    //
    // See `io.spine.server.event.EventIdSequence` for details on event ID generation.
    //
    string value = 1;
}

// `Event` is something, which happened in the past.
//
// An event consists of two parts: event message and its context.
//
// The `message` is the domain model part of the event.
// Event messages are named in the past tense.
//
// The type of the event is defined by the type of the enclosed message.
// When we speak about an 'event' as a typed thing, we refer to the message of the event.
//
// An event subscriber uses the type of the event message to receive events of this type.
//
// There can be multiple subscribers per event type.
//
// The event context contains attributes common for all events.
// It can also contain additional attributes added by the code handling the event.
//
// There is a special case of an event - a rejection event.
// A rejection event represents erroneous conditions in business, which do not allow to execute
// a command. The event is a rejection event iff the `EventContext.rejection` field is present.
//
// See `EventContext.rejection` to detemine the event kind.
//
message Event {

    // The ID of the event.
    EventId id = 1 [(required) = true];

    // The message of the event wrapped into `Any`.
    google.protobuf.Any message = 2 [(required) = true];

    // The context of the event.
    EventContext context = 3 [(required) = true];
}

// Meta-information for an event.
message EventContext {

    // When the event occurred.
    google.protobuf.Timestamp timestamp = 1 [(required) = true];

    oneof origin {
        // The context of the command which generated this event.
        CommandContext command_context = 2 [(required) = true];

        // The context of the event which generated this event.
        EventContext event_context = 6 [(required) = true];
    }

    // An ID of the root command, which lead to this event.
    //
    // If the event is a reaction to another event, then this attribute holds the identifier 
    // of the very first command in this chain.
    //
    CommandId root_command_id = 9 [(required) = true];

    // The ID of the entity which generated the event.
    //
    // Examples of event producers are: aggregates, process managers (which generate
    // `CommandRouted`).
    //
    google.protobuf.Any producer_id = 3 [(required) = true];

    // The version of the entity after the event was applied.
    Version version = 4 [(required) = true];

    // Optional enrichment of the event.
    Enrichment enrichment = 5;

    // An internal runtime attribute, which marks an event as external to the `BoundedContext`
    // in which the event is being processed.
    bool external = 8 [(internal) = true];

    // The context of the associated rejection event.
    //
    // If the associated event is a rejection event, this field is present.
    //
    RejectionEventContext rejection = 10;

    // Deleted fields.
    reserved 7;
    reserved "rejection_context";
}

// Meta-information about a rejection event.
//
message RejectionEventContext {

    // The message of the command which caused the rejection.
    google.protobuf.Any command_message = 1;

    // A stacktrace of from the code, which generated the rejection message (if available).
    string stacktrace = 2;
}

// Enumeration of possible event validation technical error reasons.
enum EventValidationError {

    // Reserved value.
    UNKNOWN_REASON = 0;

    // The event type is not supported by the server.
    UNSUPPORTED_EVENT = 1;

    // The event message is invalid according to custom Protobuf options set.
    INVALID_EVENT = 2;
}

// Data from an `Event` which is accessible from the end user code to which
// the event was dispatched.
message DispatchedEvent {

    // The event message.
    google.protobuf.Any message = 1 [(required) = true];

    // The context of the event.
    EventContext context = 2 [(required) = true];
}
