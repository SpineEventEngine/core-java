/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.core;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.core";
option java_outer_classname = "DiagnosticsProto";
option java_multiple_files = true;

import "google/protobuf/any.proto";

import "spine/core/actor_context.proto";
import "spine/core/version.proto";

// An identifier of a domain message, such as a signal, or an entity state.
message MessageId {
    option (is).java_type = "io.spine.core.MessageIdMixin";

    // The ID of the message.
    //
    // If the message is a signal (an event of a command), `id` has the value of the signal ID (an
    // `EventId` or a `CommandId`).
    //
    // If the message is an entity state, `id` has the value of the entity identifier.
    //
    google.protobuf.Any id = 1 [(required) = true, (validate) = true];

    // The type of the message.
    string type_url = 2 [(required) = true];

    // The version associated with this message.
    //
    // If the message is an entity state, this is the version of the entity. If the message is
    // an event, this is the `EventContext.version`. If the message is a command, the version is
    // absent.
    //
    core.Version version = 3 [(required) = false, (validate) = true];
}

// An origin of a message.
//
// Describes the message chain which led to the associated message to be produced.
//
message Origin {
    option (is).java_type = "io.spine.core.OriginMixin";

    // The messageId of the direct parent of the message.
    MessageId message = 1 [(required) = true, (validate) = true];

    // The origin of the direct parent of the message.
    Origin grand_origin = 2 [(required) = false, (validate) = true];

    // The actor of the message.
    //
    // The actor context is shared between all the messages in the chain.
    //
    ActorContext actor_context = 3 [(validate) = true];
}
