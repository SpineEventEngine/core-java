/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.queries;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package="io.spine.test.client";
option java_multiple_files = true;
option java_outer_classname = "ClientRequestsProto";

import "google/protobuf/timestamp.proto";
import "spine/core/user_id.proto";

// Sample objects for testing Queries and Topics.

// Simple ID for tests.
message TestEntityId {

    // Numeric value wrapped into this ID.
    int32 value = 1;
}

// Test entity used as a `Target` for queries.
message TestEntity {
    option (entity).kind = ENTITY;

    // Entity ID.
    TestEntityId id = 1;

    string first_field = 2 [(column) = true];

    bool second_field = 3  [(column) = true];

    int32 third_field = 4 [(column) = true];

    TestEntityName name = 5;

    TestEntityOwner owner = 6;
}

// A simple value holder.
//
// Is an `ENTITY` so it's possible to declare an entity column, which is needed by the test.
//
message TestEntityName {
    option (entity).kind = ENTITY;

    string value = 1 [(column) = true];
}

// A message-typed field of the `TestEntity` which is used to test operations on nested fields.
message TestEntityOwner {
    spine.core.UserId id = 1;

    google.protobuf.Timestamp when_last_visited = 2;

    Role role = 3;

    enum Role {
        UNDEFINED = 0;
        ADMIN = 1;
        USER = 2;
    }
}
