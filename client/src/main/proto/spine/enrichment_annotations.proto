//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

// We do not define the package for this file to allow shorter options for user-defined types.
// This would allow to write:
//
//     option (by) = "user_id";
//
// instead of:
//
//     option (spine.annotations.by) = "user_id";
//

option (type_url_prefix) = "type.spine3.org";
option java_generate_equals_and_hash = false;
option java_multiple_files = true;
option java_outer_classname = "EventAnnotationsProto";
option java_package = "org.spine3.annotations";

import "google/protobuf/descriptor.proto";

import "spine/annotations.proto";

extend google.protobuf.MessageOptions {

    // An instruction to associate an enrichment message with event message(s) to enrich.
    //
    // If the event message to enrich is in another package, the event type name(s) should be qualified
    // according to Protobuf conventions.
    // If the enrichment is for multiple events, their type names should be separated with the comma.
    //
    // For example:
    //
    // message MyEventEnrichment {
    //     option (enrichment_for) = "example.events.MyEvent";
    //     ...
    // }
    //
    // message EventEnrichmentForSeveralEvents {
    //     option (enrichment_for) = "example.events.FirstEvent,"
    //                               "example.events.SecondEvent";
    //     ...
    // }
    //
    //
    // This option can be omitted if:
    // - the enrichment message is enclosed into the target event message;
    // - all `by` options have the event name prefix ("example.events.MyEvent.user_id" instead of just "user_id").
    //
    string enrichment_for = 57124;  // NOTE: this field number is used in `tools` project,
                                    // EnrichmentLookupPlugin (update it there on changing).

    // An instruction to enrich an event with one or more enrichments.
    //
    // This option is defined in event messages.
    // If more than one enrichment should be added, their type names should be separated with the comma.
    //
    // For example:
    //
    // message MyEvent {
    //     option (enrichment) = "EnrichmentOne,"
    //                           "EnrichmentTwo";
    //     ...
    // }
    //
    // Fields of the referenced enrichment types refer to the fields of the event message via `by` option.
    // Therefore, if `enrichment` option is used in more than event message, the fields participating
    // in the enrichment process must have the same names.
    //
    // In the enrichment message a wildcard `by` option syntax may be used to reference more than a single
    // target events to enrich.
    //
    // For example:
    //
    // message EnrichmentForSeveralEvents {
    //     string username = 1 [(by) = "*.user_id"];
    // }
    //
    string enrichment = 57126; // NOTE: this field number is used in the `tools` project,
                               // EnrichmentLookupPlugin (update it there on changing).
}

extend google.protobuf.FieldOptions {

    // An instruction to associate an enrichment message field with the field from an event message to enrich
    // (or event context field).
    //
    // The value of the option is the name of the target event message/context field
    // which is used to set the corresponding enrichment's field.
    // The value must have event/context FQN prefix if `enrichment_for` option is omitted
    // ("example.events.MyEvent.user_id" instead of just "user_id").
    //
    // An example:
    //
    // message MyEvent {
    //    spine.users.UserId user_id = 1;
    //    ...
    //    message Enrichment {
    //       spine.people.PersonName name = 1 [(by) = "user_id"];
    //
    //       string time = 2 [(by) = "context.timestamp"];
    //    }
    // }
    //
    // message MyEventEnrichment {
    //     string username = 1 [(by) = "MyEvent.user_id"];
    // }
    //
    // If a single enrichment message is used to enrich several events, a wildcard syntax may be used.
    //
    // An example:
    //
    // message EnrichmentForSeveralEvents {
    //     string username = 1 [(by) = "*.user_id"];
    // }
    //
    // message EventOne {
    //     option (enrichment) = "EnrichmentForSeveralEvents";
    //
    //     int32 user_id = 1;
    // }
    //
    // message EventTwo {
    //     option (enrichment) = "EnrichmentForSeveralEvents";
    //
    //     int32 user_id = 1;
    // }
    //
    // Also, the multiple arguments are supported. The syntax is:
    //
    // message EnrichmentForSeveralEvents {
    //     option (enrichment) = "EnrichmentForSeveralEvents";
    //
    //     int32 user_id = 1 [(by) = "qualifier.One.target_field | qualifier.Two.alternate_target_field"];
    // }
    //
    // Wildcard syntax for the target fields is supported in cases when annotation `enrichment_for` gives a
    // not ambiguous definition for the target type.
    //
    // If using the FQN field names, the `enrichment_for` annotation may be omitted
    // (the same behavior as with a single-argument `by` annotation).
    //
    string by = 57125; // NOTE: this field number is used in the `tools` project,
                       // EnrichmentLookupPlugin (update it there on changing).
}
