//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.client;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.client.grpc";
option java_multiple_files = true;
option java_outer_classname = "SubscriptionServiceProto";
option java_generate_equals_and_hash = true;

import "spine/client/subscription.proto";
import "spine/core/response.proto";

// A service for subscribing to the read-side changes by clients.
service SubscriptionService {

    // Create the subscription to the particular read-side updates.
    //
    // Topic defines the target of subscription and other attributes (like field masks).
    // NOTE: this method serves for Topic creation; to start listening for updates use #Activate(Subscription).
    rpc Subscribe (Topic) returns (Subscription);


    // Activate the subscription to the particular read-side updates.
    //
    // The client will start receiving the subscription updates upon new topic target changes in the read-side.
    // Cancelled subscriptions cannot be activated.
    rpc Activate(Subscription) returns (stream SubscriptionUpdate);


    // Cancel the given subscription.
    //
    // Clients will stop receiving the SubscriptionUpdate after this method is called.
    // The subscription is destroyed as a result of invocation.
    rpc Cancel (Subscription) returns (core.Response);
}
