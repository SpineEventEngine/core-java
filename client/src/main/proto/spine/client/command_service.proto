/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.client;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.client.grpc";
option java_multiple_files = true;
option java_outer_classname = "CommandServiceProto";

import "spine/core/command.proto";
import "spine/core/ack.proto";

// A service for posting commands to the application backend.
//
service CommandService {

    // Posts the given command to the application backend.
    //
    // When the command is successfully received by the application, it responds with
    // an acknowledgement. The received `Ack` may have one of the following statuses:
    //
    //    1. `Ok` meaning the command is accepted for further processing.
    //    2. `Error` when a technical error occurs on the side of the application.
    //    3. `Rejection` if no technical error occurred but due to the business rules the command
    //        should be immediately disqualified from being executed. A typical scenario would be
    //        when the permissions of a user who made a request aren't broad enough.
    //
    // In case of internal gRPC errors or issues on a transport layer, an `Ack` would not be
    // received. All errors which occur on the side of gRCP should be handled by the means
    // of the used client stub.
    //
    rpc Post(core.Command) returns (core.Ack);
}
