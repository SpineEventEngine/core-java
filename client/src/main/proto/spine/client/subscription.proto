/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.client;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.client";
option java_multiple_files = true;
option java_outer_classname = "SubscriptionProto";

import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";

import "spine/core/user_id.proto";
import "spine/core/tenant_id.proto";
import "spine/core/actor_context.proto";
import "spine/core/event.proto";
import "spine/core/response.proto";
import "spine/client/filters.proto";

// Topic identifier.
message TopicId {

    // The value of the ID.
    //
    // Starts with the `t-` prefix followed by a generated UUID value.
    //
    string value = 1;
}

// An object defining a unit of subscription.
//
// Defines the target (type and criteria) of subscription.
//
message Topic {

    TopicId id = 1 [(required) = true];

    // Defines the target of interest, e.g. event/entity type URL and a set of subscription
    // criteria.
    Target target = 2 [(required) = true,
                       (validate) = true,
                       (if_invalid).msg_format = "Invalid topic target"];

    // Field mask to be applied to the subscription updates.
    google.protobuf.FieldMask field_mask = 3;

    // Service information about the environment in which the topic was created.
    core.ActorContext context = 4 [(required) = true,
                                   (validate) = true,
                                   (if_invalid).msg_format = "Invalid actor context"];
}

// Wrapped collection of read-side entity updates on a topic with the specific subscription ID.
message SubscriptionUpdate {
    option (is).java_type = "SubscriptionUpdateMixin";

    // The subscription in which scope this update is propagated.
    Subscription subscription = 1 [(required) = true];

    // Represents the base part of the response,
    // i.e. whether the Topic subscription has been acked or not.
    core.Response response = 2 [(required) = true];

    // Reserved for more subscription update attributes.
    reserved 3 to 9;

    // Deleted field `updates`.
    //
    // Use new `update` field instead.
    //
    reserved 10;

    // Deleted field `entity_state_updates`.
    //
    // Use new `update` field instead.
    //
    reserved 11;

    // Each subscription update delivers either entity state updates or events that occurred in the
    // system.
    oneof update {

        // The entity state updates if it's an entity subscription.
        EntityUpdates entity_updates = 12;

        // The new events occurred in the system if it's an event subscription.
        EventUpdates event_updates = 13;
    }
}

// The updates on the observed entity state.
message EntityUpdates {

    // The entity state update list.
    repeated EntityStateUpdate update = 1 [(validate) = true];
}

// The update happened to the entity of interest.
message EntityStateUpdate {

    // The entity ID packed as Any.
    google.protobuf.Any id = 1 [(required) = true];

    // The update may be one of two things.
    oneof kind {

        // The state of entity has been updated and packed here as `Any`.
        //
        // If the field mask is set in `Topic`, this value is masked.
        //
        google.protobuf.Any state = 2;

        // The state of the entity has been changed, so that previously it matched the subscription
        // `Target` filters, and now it does not.
        //
        // For example, consider a subscription to all `UserSession`s in which user has sent at most
        // `N` requests:
        // ```
        // WHERE REQUEST_COUNT <= N
        // ```
        //
        // Suppose a `UserSession` with ID 42 matches the subscription. After some time, the user
        // makes their N + 1-th request and the `UserSession` with ID 42 stops matching
        // the subscription. Hence, the next update brings the `no_longer_matching` option instead
        // of an entity state.
        //
        bool no_longer_matching = 3;
    }
}

// The new events of the observed type that occurred in the system.
message EventUpdates {

    // The event list.
    repeated core.Event event = 1 [(validate) = true];
}

// Subscription identifier.
message SubscriptionId {

    // The value of the subscription ID.
    //
    // Starts with the `s-` prefix followed by a generated UUID value.
    //
    string value = 1;
}

// The subscription object.
//
// Created when the client subscribes to a topic inside the read-side implementation.
// Generally should not be created directly in the client code.
//
// See SubscriptionService#Subscribe(Topic).
//
message Subscription {

    option (is).java_type = "SubscriptionMixin";

    // Unique identifier of the subscription.
    //
    // Must be unique in scope of a bounded context.
    //
    SubscriptionId id = 1 [(required) = true];

    // Represents the original topic for this subscription.
    Topic topic = 2 [(required) = true, (validate) = true, (if_invalid).msg_format = "Invalid topic"];
}

// Enumeration of possible technical error reasons occurred in topic validation.
enum TopicValidationError {

    // Reserved value.
    TVE_UNKNOWN_REASON = 0;

    // The topic target is not supported by the server.
    UNSUPPORTED_TOPIC_TARGET = 1;

    // The topic message is invalid according to custom Protobuf options set.
    INVALID_TOPIC = 2;
}

// Enumeration of possible technical error reasons occurred in subscription validation.
enum SubscriptionValidationError {

    // Reserved value.
    SVE_UNKNOWN_REASON = 0;

    // The target of the subscription topic is not supported by the server.
    UNSUPPORTED_SUBSCRIPTION_TARGET = 1;

    // The subscription message is invalid according to custom Protobuf options set.
    INVALID_SUBSCRIPTION = 2;

    // This subscription is unknown to this server.
    UNKNOWN_SUBSCRIPTION = 3;
}
