//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.client;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.client";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "SubscriptionProto";

import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";

import "spine/core/user_id.proto";
import "spine/core/tenant_id.proto";
import "spine/core/actor_context.proto";
import "spine/core/response.proto";
import "spine/client/entities.proto";

// Topic identifier.
message TopicId {

    // The value of the ID.
    //
    // Starts with the `t-` prefix followed by a generated UUID value.
    //
    string value = 1;
}

// An object defining a unit of subscription.
//
// Defines the target (entities and criteria) of subscription.
//
message Topic {

    TopicId id = 1 [(required) = true];

    // Defines the entity of interest, e.g. entity type URL and a set of subscription criteria.
    Target target = 2 [(required) = true,
                       (valid) = true,
                       (if_invalid).msg_format = "Invalid topic target"];

    // Field mask to be applied to the entity updates applicable to this topic.
    //
    // Applied to each of the entity state messages before returning in scope of SubscriptionUpdate.
    google.protobuf.FieldMask field_mask = 3;

    // Service information about the environment in which the topic was created.
    core.ActorContext context = 4 [(required) = true,
                                   (valid) = true,
                                   (if_invalid).msg_format = "Invalid actor context"];

    // Reserved for utility fields.
    reserved 5 to 10;
}

// Wrapped collection of read-side entity updates on a topic with the specific subscription ID.
message SubscriptionUpdate {

    // The subscription in which scope this update is propagated.
    Subscription subscription = 1 [(required) = true];

    // Represents the base part of the response,
    //   i.e. whether the Topic subscription has been acked or not.
    core.Response response = 2 [(required) = true];

    // Reserved for more subscription update attributes.
    reserved 3 to 9;

    // Deleted field `updates`.
    //
    // Use `entity_state_updates` instead.
    //
    reserved 10;

    // The updates of the entity states.
    //
    // Each update is a pair of an entity ID and state.
    //
    // Each of the update state messages is affected by the field mask set for the current
    // subscription.
    //
    repeated EntityStateUpdate entity_state_updates = 11 [(valid) = true];
}

// The pair of the entity ID and the entity state both packed as Any.
message EntityStateUpdate {

    // The entity ID packed as Any.
    google.protobuf.Any id = 1 [(required) = true];

    // The entity state packed as Any.
    //
    // May be affected by a field mask specified in the subscription Topic.
    //
    google.protobuf.Any state = 2 [(required) = true];
}

// Subscription identifier.
message SubscriptionId {

    // The value of the subscription ID.
    //
    // Starts with the `s-` prefix followed by a generated UUID value.
    //
    string value = 1;
}

// The subscription object.
//
// Created when the client subscribes to a topic inside the read-side implementation.
// Generally should not be created in the client code.
// See SubscriptionService#Subscribe(Topic).
message Subscription {

    // Unique identifier of the subscription.
    //
    // Must be unique in scope of a bounded context.
    //
    SubscriptionId id = 1 [(required) = true];

    // Represents the original topic for this subscription.
    Topic topic = 2 [(required) = true, (valid) = true, (if_invalid).msg_format = "Invalid topic"];

    // Reserved for subscription attributes.
    reserved 3 to 10;
}

// Enumeration of possible technical error reasons occurred in topic validation.
enum TopicValidationError {

    // Reserved value.
    TVE_UNKNOWN_REASON = 0;

    // The topic target is not supported by the server.
    UNSUPPORTED_TOPIC_TARGET = 1;

    // The topic message is invalid according to custom Protobuf options set.
    INVALID_TOPIC = 2;
}

// Enumeration of possible technical error reasons occurred in subscription validation.
enum SubscriptionValidationError {

    // Reserved value.
    SVE_UNKNOWN_REASON = 0;

    // The target of the subscription topic is not supported by the server.
    UNSUPPORTED_SUBSCRIPTION_TARGET = 1;

    // The subscription message is invalid according to custom Protobuf options set.
    INVALID_SUBSCRIPTION = 2;

    // This subscription is unknown to this server.
    UNKNOWN_SUBSCRIPTION = 3;
}
