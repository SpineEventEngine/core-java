/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.client;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "QueryProto";
option java_package = "io.spine.client";

import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";

import "spine/core/user_id.proto";
import "spine/core/actor_context.proto";
import "spine/core/response.proto";
import "spine/client/filters.proto";
import "spine/core/version.proto";

// Query identifier.
//
message QueryId {

    // The value of the ID.
    //
    // Starts with the `q-` prefix followed by a generated UUID value.
    //
    string value = 1;
}

// An order for query results.
//
message OrderBy {
    
    // A direction of sorting for ordering the Query results.
    Direction direction = 1 [(required) = true];

    // A column name which value is used for ordering the query results. 
    string column = 2 [(required) = true];
    
    // A direction of an `OrderBy` clause specifying if greater or lesser values should come first.
    enum Direction {
        
        // Reserved default value.
        OD_UNKNOWN = 0;
        
        // An order in which every following value is greater than the previous one.
        //
        // For example, collections sorted in an ascending order are `[1, 2, 3]` and 
        // `["2 cherries", "apple", "apricot", "orange"]`.
        //
        // The missing values are placed at the beginning of a collection in an ascending order:
        // `[null, -2211760924, 0, 943912800]`.
        //
        ASCENDING = 1;

        // An order in which every following value is lesser than the previous one.
        //
        // For example, collections sorted in a descending order are `[2033, 2001, 1984]` and 
        // `['NaCl', 'N2O', 'H2O2', 'H2O', 'C12H22O11']`.
        //
        // The missing values are placed at the end of a collection in a descending order:
        // `[1905, 1687, -280, null]`.
        //
        DESCENDING = 2;
    }
}

// Allows clients to form the requests to the read-side through the `QueryService`.
//
// `Query` execution typically results in a `QueryResponse` object.
//
message Query {

    option (is).java_type = "QueryMixin";

    // The ID of the query.
    QueryId id = 1 [(required) = true];

    // Defines the entity of interest, e.g. entity type URL and a set of fetch criteria.
    Target target = 2 [(required) = true,
                       (validate) = true,
                       (if_invalid).msg_format = "Invalid query target"];

    // Service information about the environment in which the query was created.
    core.ActorContext context = 3 [(required) = true,
                                   (validate) = true,
                                   (if_invalid).msg_format = "Invalid actor context"];

    ResponseFormat format = 4 [(validate) = true,
                               (if_invalid).msg_format = "Invalid response format"];
}

// A `Query` response format.
//
// Includes which data should be retrieved, the ordering, and pagination.
//
message ResponseFormat {

    // Field mask to be applied to the items of the query result.
    google.protobuf.FieldMask field_mask = 1;

    // An order for entities returned by the Query.
    OrderBy order_by = 2 [(validate) = true,
                          (if_invalid).msg_format = "Invalid query order"];

    // The max number of entities to retrieve.
    //
    // If greater than 0, `order_by` should be set as well.
    //
    uint32 limit = 3;
}

// The result of `Query` processing.
//
// Contains the actual processing results and other response attributes.
// Used as a result of `QueryService.Read(Query)` gRPC method call.
//
message QueryResponse {
    option (is).java_type = "QueryResponseMixin";

    // The base status part of the query processing response.
    //
    // For example: whether the `Query` has been acked or not.
    //
    core.Response response = 1 [(required) = true];

    // Entity states and versions returned to the API user as a result of Query execution.
    repeated EntityStateWithVersion message = 2;
}

// Represents the entity state combined with entity version.
//
// This message is a part of Query response.
//
message EntityStateWithVersion {

    // The state of the entity packed as `Any`.
    google.protobuf.Any state = 1;

    // The version of the entity.
    core.Version version = 2;
}

// Enumeration of possible technical error reasons occurred in query validation.
enum QueryValidationError {

    // Reserved value.
    QVE_UNKNOWN_REASON = 0;

    // The query target is not supported by the server.
    UNSUPPORTED_QUERY_TARGET = 1;

    // The query message is invalid according to custom Protobuf options set.
    INVALID_QUERY = 2;
}
