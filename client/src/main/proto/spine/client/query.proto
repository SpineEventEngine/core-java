//
// Copyright 2018, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.client;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;
option java_outer_classname = "QueryProto";
option java_package = "io.spine.client";

import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";

import "spine/core/user_id.proto";
import "spine/core/actor_context.proto";
import "spine/core/response.proto";
import "spine/client/entities.proto";

// Query identifier.
message QueryId {

    // The value of the ID.
    //
    // Starts with the `q-` prefix followed by a generated UUID value.
    //
    string value = 1;
}

// Allows clients to form the requests to the read-side through the `QueryService`.
//
// `Query` execution typically results in a `QueryResponse` object.
//
message Query {

    // The ID of the query.
    QueryId id = 1 [(required) = true];

    // Defines the entity of interest, e.g. entity type URL and a set of fetch criteria.
    Target target = 2 [(required) = true,
                       (valid) = true,
                       (if_invalid).msg_format = "Invalid query target"];

    // Field mask to be applied to the items of the query result.
    google.protobuf.FieldMask field_mask = 3;

    // Service information about the environment in which the query was created.
    core.ActorContext context = 4 [(required) = true,
                                   (valid) = true,
                                   (if_invalid).msg_format = "Invalid actor context"];

    // Reserved for utility fields required response timeframe etc.
    reserved 5 to 10;
}

// The result of `Query` processing.
//
// Contains the actual processing results and other response attributes.
// Used as a result of `QueryService.Read(Query)` gRPC method call.
//
message QueryResponse {

    // The base status part of the query processing response.
    // For example: whether the `Query` has been acked or not.
    //
    core.Response response = 1 [(required) = true];

    // Reserved for more query response attributes, e.g. to describe paginated response etc.
    reserved 2 to 4;

    //TODO:2017-02-20:alexander.yevsyukov: Use EntityRecord instead of Any.
    // Entity states (each packed as `Any`) returned to the API user as a result of Query execution.
    repeated google.protobuf.Any messages = 5;
}

// Enumeration of possible technical error reasons occurred in query validation.
enum QueryValidationError {

    // Reserved value.
    QVE_UNKNOWN_REASON = 0;

    // The query target is not supported by the server.
    UNSUPPORTED_QUERY_TARGET = 1;

    // The query message is invalid according to custom Protobuf options set.
    INVALID_QUERY = 2;
}
