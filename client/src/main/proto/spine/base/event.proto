//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.base;

option (type_url_prefix) = "type.spine3.org";
option java_package = "org.spine3.base";
option java_multiple_files = true;
option java_outer_classname = "EventProto";
option java_generate_equals_and_hash = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "spine/annotations.proto";
import "spine/validate.proto";
import "spine/base/command.proto";
import "spine/base/version.proto";
import "spine/base/enrichment.proto";

// Event identifier.
message EventId {
    string uuid = 1;
}

// `Event` is something, which happened in the past.
//
// An event consists of two parts: event message and its context.
//
// The `message` is the domain model part of the event.
// Event messages are named in the past tense.
//
// The type of the event is defined by the type of the enclosed message.
// When we speak about an 'event' as a typed thing, we refer to the
// message of the event.
//
// An event subscriber uses the type of the event message to receive
// events of this type.
//
// There can be multiple subscribers per event type.
//
// The event context contains attributes common for all events.
// It can also contain additional attributes added by the code handling the event.
//
message Event {

    // The message of the event wrapped into `Any`.
    google.protobuf.Any message = 1 [(required) = true];

    // The context of the event.
    EventContext context = 2 [(required) = true];
}

// Meta-information for an event.
message EventContext {

    // The ID of the event.
    EventId event_id = 1 [(required) = true];

    // When the event occurred.
    google.protobuf.Timestamp timestamp = 2 [(required) = true];

    // The context of the command, which generated this event.
    CommandContext command_context = 3;

    // The ID of the entity which generated the event.
    //
    // Examples of event producers are: aggregates, process managers
    // (which generate `CommandRouted`), bounded contexts (for integration events).
    //
    google.protobuf.Any producer_id = 4 [(required) = true];

    // The version of the entity after the event was applied.
    Version version = 5 [(required) = true];

    // Optional enrichment of the event.
    Enrichment enrichment = 6;
}

// Enumeration of possible event validation technical error reasons.
enum EventValidationError {

    // Reserved value.
    UNKNOWN_REASON = 0;

    // The event type is not supported by the server.
    UNSUPPORTED_EVENT = 1;

    // The event message is invalid according to custom Protobuf options set.
    INVALID_EVENT = 2;
}
