/*
 * Copyright 2016, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Apply this script to add ability to publish the needed artifacts.

String repositoryUserName = null
String repositoryUserPassword = null

task readPublishingCredentials << {
    final Properties properties = new Properties()
    final File credentialsFile = project.file(project.CREDENTIALS_FILE_PATH)
    if (credentialsFile.exists()) {
        properties.load(credentialsFile.newDataInputStream())
        repositoryUserName = properties.getProperty("user.name")
        repositoryUserPassword = properties.getProperty("user.password")
    }
    if (repositoryUserName == null || repositoryUserPassword == null) {
        throw new InvalidUserDataException("Please set up valid credentials. " +
                "Credentials must be set in '${project.CREDENTIALS_FILE_PATH}' file in the project\'s root.")
    }
    println "Publishing build as ${repositoryUserName}"
}

task publish << {}

void dependPublish(final Project project) {
    final Set<Task> credentialsTasks = getTasksByName("readPublishingCredentials", false)
    project.getTasksByName("publish", false).each { final task ->
        task.dependsOn credentialsTasks
    }
    publish.dependsOn project.getTasksByName("publish", false)
}

PROJECTS_TO_PUBLISH.each {
    project(":$it") { final currentProject ->
        apply plugin: 'maven-publish'

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = "${group}"
                    artifactId = "${currentProject.name}"
                    version = "${currentProject.version}"

                    from components.java

                    artifact sourceJar
                    artifact testOutputJar
                }
            }
        }

        publishing {
            repositories {
                maven {
                    url = 'http://maven.teamdev.com/repository/spine'
                    credentials {
                        username = "${repositoryUserName}"
                        password = "${repositoryUserPassword}"
                    }
                }
            }
        }

        dependPublish(project)
    }
}
