[{"name":"BlackBoxContext context()","description":"io.spine.testing.server.blackbox.ContextAwareTest.context","location":"testutil-server/io.spine.testing.server.blackbox/-context-aware-test/context.html","searchKeys":["context","BlackBoxContext context()","io.spine.testing.server.blackbox.ContextAwareTest.context"]},{"name":"BlackBoxContext importsEvent(Message eventOrMessage)","description":"io.spine.testing.server.blackbox.BlackBoxContext.importsEvent","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/imports-event.html","searchKeys":["importsEvent","BlackBoxContext importsEvent(Message eventOrMessage)","io.spine.testing.server.blackbox.BlackBoxContext.importsEvent"]},{"name":"BooleanSubject archivedFlag()","description":"io.spine.testing.server.entity.EntitySubject.archivedFlag","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/archived-flag.html","searchKeys":["archivedFlag","BooleanSubject archivedFlag()","io.spine.testing.server.entity.EntitySubject.archivedFlag"]},{"name":"BooleanSubject deletedFlag()","description":"io.spine.testing.server.entity.EntitySubject.deletedFlag","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/deleted-flag.html","searchKeys":["deletedFlag","BooleanSubject deletedFlag()","io.spine.testing.server.entity.EntitySubject.deletedFlag"]},{"name":"BoundedContextName name()","description":"io.spine.testing.server.blackbox.BlackBoxContext.name","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/name.html","searchKeys":["name","BoundedContextName name()","io.spine.testing.server.blackbox.BlackBoxContext.name"]},{"name":"Client client()","description":"io.spine.testing.server.blackbox.BlackBoxContext.client","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/client.html","searchKeys":["client","Client client()","io.spine.testing.server.blackbox.BlackBoxContext.client"]},{"name":"D readOperation<D>(Supplier<D> supplier)","description":"io.spine.testing.server.blackbox.BlackBoxContext.readOperation","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/read-operation.html","searchKeys":["readOperation","D readOperation<D>(Supplier<D> supplier)","io.spine.testing.server.blackbox.BlackBoxContext.readOperation"]},{"name":"Entity<?, ?> actual()","description":"io.spine.testing.server.entity.EntitySubject.actual","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/actual.html","searchKeys":["actual","Entity<?, ?> actual()","io.spine.testing.server.entity.EntitySubject.actual"]},{"name":"EntityVersionSubject containsSingleEntityVersionThat()","description":"io.spine.testing.server.entity.IterableEntityVersionSubject.containsSingleEntityVersionThat","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/contains-single-entity-version-that.html","searchKeys":["containsSingleEntityVersionThat","EntityVersionSubject containsSingleEntityVersionThat()","io.spine.testing.server.entity.IterableEntityVersionSubject.containsSingleEntityVersionThat"]},{"name":"EntityVersionSubject containsSingleEntityVersionThat()","description":"io.spine.testing.server.query.QueryResultSubject.containsSingleEntityVersionThat","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/contains-single-entity-version-that.html","searchKeys":["containsSingleEntityVersionThat","EntityVersionSubject containsSingleEntityVersionThat()","io.spine.testing.server.query.QueryResultSubject.containsSingleEntityVersionThat"]},{"name":"EntityVersionSubject version()","description":"io.spine.testing.server.entity.EntitySubject.version","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/version.html","searchKeys":["version","EntityVersionSubject version()","io.spine.testing.server.entity.EntitySubject.version"]},{"name":"Event createEvent(EventMessage message)","description":"io.spine.testing.server.TestEventFactory.createEvent","location":"testutil-server/io.spine.testing.server/-test-event-factory/create-event.html","searchKeys":["createEvent","Event createEvent(EventMessage message)","io.spine.testing.server.TestEventFactory.createEvent"]},{"name":"Event createEvent(EventMessage message, Version version, Timestamp atTime)","description":"io.spine.testing.server.TestEventFactory.createEvent","location":"testutil-server/io.spine.testing.server/-test-event-factory/create-event.html","searchKeys":["createEvent","Event createEvent(EventMessage message, Version version, Timestamp atTime)","io.spine.testing.server.TestEventFactory.createEvent"]},{"name":"Factory<CommandSubject, Iterable<Command>> factory()","description":"io.spine.testing.server.CommandSubject.factory","location":"testutil-server/io.spine.testing.server/-command-subject/factory.html","searchKeys":["factory","Factory<CommandSubject, Iterable<Command>> factory()","io.spine.testing.server.CommandSubject.factory"]},{"name":"Factory<EventSubject, Iterable<Event>> factory()","description":"io.spine.testing.server.EventSubject.factory","location":"testutil-server/io.spine.testing.server/-event-subject/factory.html","searchKeys":["factory","Factory<EventSubject, Iterable<Event>> factory()","io.spine.testing.server.EventSubject.factory"]},{"name":"ImmutableList<EntityState> actual()","description":"io.spine.testing.server.query.QueryResultSubject.actual","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/actual.html","searchKeys":["actual","ImmutableList<EntityState> actual()","io.spine.testing.server.query.QueryResultSubject.actual"]},{"name":"ImmutableList<T> actual()","description":"io.spine.testing.server.EmittedMessageSubject.actual","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/actual.html","searchKeys":["actual","ImmutableList<T> actual()","io.spine.testing.server.EmittedMessageSubject.actual"]},{"name":"IterableEntityVersionSubject containsEntityVersionListThat()","description":"io.spine.testing.server.query.QueryResultSubject.containsEntityVersionListThat","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/contains-entity-version-list-that.html","searchKeys":["containsEntityVersionListThat","IterableEntityVersionSubject containsEntityVersionListThat()","io.spine.testing.server.query.QueryResultSubject.containsEntityVersionListThat"]},{"name":"IterableOfProtosSubject<EntityState> assertEntityStates()","description":"io.spine.testing.server.blackbox.SubscriptionFixture.assertEntityStates","location":"testutil-server/io.spine.testing.server.blackbox/-subscription-fixture/assert-entity-states.html","searchKeys":["assertEntityStates","IterableOfProtosSubject<EntityState> assertEntityStates()","io.spine.testing.server.blackbox.SubscriptionFixture.assertEntityStates"]},{"name":"IterableOfProtosSubject<EventMessage> assertEventMessages()","description":"io.spine.testing.server.blackbox.SubscriptionFixture.assertEventMessages","location":"testutil-server/io.spine.testing.server.blackbox/-subscription-fixture/assert-event-messages.html","searchKeys":["assertEventMessages","IterableOfProtosSubject<EventMessage> assertEventMessages()","io.spine.testing.server.blackbox.SubscriptionFixture.assertEventMessages"]},{"name":"Optional<Event> postEvent(EventMessage event)","description":"io.spine.testing.server.NoOpLifecycle.postEvent","location":"testutil-server/io.spine.testing.server/-no-op-lifecycle/post-event.html","searchKeys":["postEvent","Optional<Event> postEvent(EventMessage event)","io.spine.testing.server.NoOpLifecycle.postEvent"]},{"name":"Optional<Event> postEvent(EventMessage event, Origin explicitOrigin)","description":"io.spine.testing.server.NoOpLifecycle.postEvent","location":"testutil-server/io.spine.testing.server/-no-op-lifecycle/post-event.html","searchKeys":["postEvent","Optional<Event> postEvent(EventMessage event, Origin explicitOrigin)","io.spine.testing.server.NoOpLifecycle.postEvent"]},{"name":"ProtoSubject containsSingleEntityStateThat()","description":"io.spine.testing.server.query.QueryResultSubject.containsSingleEntityStateThat","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/contains-single-entity-state-that.html","searchKeys":["containsSingleEntityStateThat","ProtoSubject containsSingleEntityStateThat()","io.spine.testing.server.query.QueryResultSubject.containsSingleEntityStateThat"]},{"name":"ProtoSubject hasStateThat()","description":"io.spine.testing.server.entity.EntitySubject.hasStateThat","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/has-state-that.html","searchKeys":["hasStateThat","ProtoSubject hasStateThat()","io.spine.testing.server.entity.EntitySubject.hasStateThat"]},{"name":"QueryResultSubject assertQueryResult(Query query)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertQueryResult","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-query-result.html","searchKeys":["assertQueryResult","QueryResultSubject assertQueryResult(Query query)","io.spine.testing.server.blackbox.BlackBoxContext.assertQueryResult"]},{"name":"ResponseStatusSubject hasStatusThat()","description":"io.spine.testing.server.query.QueryResultSubject.hasStatusThat","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/has-status-that.html","searchKeys":["hasStatusThat","ResponseStatusSubject hasStatusThat()","io.spine.testing.server.query.QueryResultSubject.hasStatusThat"]},{"name":"SubscriptionFixture subscribeTo(Topic topic)","description":"io.spine.testing.server.blackbox.BlackBoxContext.subscribeTo","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/subscribe-to.html","searchKeys":["subscribeTo","SubscriptionFixture subscribeTo(Topic topic)","io.spine.testing.server.blackbox.BlackBoxContext.subscribeTo"]},{"name":"TenantId tenantId()","description":"io.spine.testing.server.tenant.TenantAwareTest.tenantId","location":"testutil-server/io.spine.testing.server.tenant/-tenant-aware-test/tenant-id.html","searchKeys":["tenantId","TenantId tenantId()","io.spine.testing.server.tenant.TenantAwareTest.tenantId"]},{"name":"Version actual()","description":"io.spine.testing.server.entity.EntityVersionSubject.actual","location":"testutil-server/io.spine.testing.server.entity/-entity-version-subject/actual.html","searchKeys":["actual","Version actual()","io.spine.testing.server.entity.EntityVersionSubject.actual"]},{"name":"abstract BlackBoxContext withTenant(TenantId tenant)","description":"io.spine.testing.server.blackbox.BlackBoxContext.withTenant","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/with-tenant.html","searchKeys":["withTenant","abstract BlackBoxContext withTenant(TenantId tenant)","io.spine.testing.server.blackbox.BlackBoxContext.withTenant"]},{"name":"abstract BoundedContextBuilder contextBuilder()","description":"io.spine.testing.server.blackbox.ContextAwareTest.contextBuilder","location":"testutil-server/io.spine.testing.server.blackbox/-context-aware-test/context-builder.html","searchKeys":["contextBuilder","abstract BoundedContextBuilder contextBuilder()","io.spine.testing.server.blackbox.ContextAwareTest.contextBuilder"]},{"name":"abstract Factory<S, Iterable<T>> factory()","description":"io.spine.testing.server.EmittedMessageSubject.factory","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/factory.html","searchKeys":["factory","abstract Factory<S, Iterable<T>> factory()","io.spine.testing.server.EmittedMessageSubject.factory"]},{"name":"final BlackBoxContext append(Event event)","description":"io.spine.testing.server.blackbox.BlackBoxContext.append","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/append.html","searchKeys":["append","final BlackBoxContext append(Event event)","io.spine.testing.server.blackbox.BlackBoxContext.append"]},{"name":"final BlackBoxContext importsEvents(EventMessage first, EventMessage second, Array<EventMessage> rest)","description":"io.spine.testing.server.blackbox.BlackBoxContext.importsEvents","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/imports-events.html","searchKeys":["importsEvents","final BlackBoxContext importsEvents(EventMessage first, EventMessage second, Array<EventMessage> rest)","io.spine.testing.server.blackbox.BlackBoxContext.importsEvents"]},{"name":"final BlackBoxContext in(ZoneId zoneId)","description":"io.spine.testing.server.blackbox.BlackBoxContext.in","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/in.html","searchKeys":["in","final BlackBoxContext in(ZoneId zoneId)","io.spine.testing.server.blackbox.BlackBoxContext.in"]},{"name":"final BlackBoxContext receivesCommand(CommandMessage domainCommand)","description":"io.spine.testing.server.blackbox.BlackBoxContext.receivesCommand","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/receives-command.html","searchKeys":["receivesCommand","final BlackBoxContext receivesCommand(CommandMessage domainCommand)","io.spine.testing.server.blackbox.BlackBoxContext.receivesCommand"]},{"name":"final BlackBoxContext receivesCommands(CommandMessage first, CommandMessage second, Array<CommandMessage> rest)","description":"io.spine.testing.server.blackbox.BlackBoxContext.receivesCommands","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/receives-commands.html","searchKeys":["receivesCommands","final BlackBoxContext receivesCommands(CommandMessage first, CommandMessage second, Array<CommandMessage> rest)","io.spine.testing.server.blackbox.BlackBoxContext.receivesCommands"]},{"name":"final BlackBoxContext receivesEvent(EventMessage domainEvent)","description":"io.spine.testing.server.blackbox.BlackBoxContext.receivesEvent","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/receives-event.html","searchKeys":["receivesEvent","final BlackBoxContext receivesEvent(EventMessage domainEvent)","io.spine.testing.server.blackbox.BlackBoxContext.receivesEvent"]},{"name":"final BlackBoxContext receivesEvents(EventMessage first, EventMessage second, Array<EventMessage> rest)","description":"io.spine.testing.server.blackbox.BlackBoxContext.receivesEvents","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/receives-events.html","searchKeys":["receivesEvents","final BlackBoxContext receivesEvents(EventMessage first, EventMessage second, Array<EventMessage> rest)","io.spine.testing.server.blackbox.BlackBoxContext.receivesEvents"]},{"name":"final BlackBoxContext receivesEventsProducedBy(Object producerId, EventMessage first, Array<EventMessage> rest)","description":"io.spine.testing.server.blackbox.BlackBoxContext.receivesEventsProducedBy","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/receives-events-produced-by.html","searchKeys":["receivesEventsProducedBy","final BlackBoxContext receivesEventsProducedBy(Object producerId, EventMessage first, Array<EventMessage> rest)","io.spine.testing.server.blackbox.BlackBoxContext.receivesEventsProducedBy"]},{"name":"final BlackBoxContext receivesExternalEvent(Message messageOrEvent)","description":"io.spine.testing.server.blackbox.BlackBoxContext.receivesExternalEvent","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/receives-external-event.html","searchKeys":["receivesExternalEvent","final BlackBoxContext receivesExternalEvent(Message messageOrEvent)","io.spine.testing.server.blackbox.BlackBoxContext.receivesExternalEvent"]},{"name":"final BlackBoxContext receivesExternalEvents(EventMessage first, EventMessage second, Array<EventMessage> other)","description":"io.spine.testing.server.blackbox.BlackBoxContext.receivesExternalEvents","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/receives-external-events.html","searchKeys":["receivesExternalEvents","final BlackBoxContext receivesExternalEvents(EventMessage first, EventMessage second, Array<EventMessage> other)","io.spine.testing.server.blackbox.BlackBoxContext.receivesExternalEvents"]},{"name":"final BlackBoxContext tolerateFailures()","description":"io.spine.testing.server.blackbox.BlackBoxContext.tolerateFailures","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/tolerate-failures.html","searchKeys":["tolerateFailures","final BlackBoxContext tolerateFailures()","io.spine.testing.server.blackbox.BlackBoxContext.tolerateFailures"]},{"name":"final BlackBoxContext withActor(UserId user)","description":"io.spine.testing.server.blackbox.BlackBoxContext.withActor","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/with-actor.html","searchKeys":["withActor","final BlackBoxContext withActor(UserId user)","io.spine.testing.server.blackbox.BlackBoxContext.withActor"]},{"name":"final CommandSubject assertCommands()","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertCommands","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-commands.html","searchKeys":["assertCommands","final CommandSubject assertCommands()","io.spine.testing.server.blackbox.BlackBoxContext.assertCommands"]},{"name":"final EntitySubject assertEntity<I, E extends Entity<I, ? extends EntityState>>(Class<E> entityClass, I id)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertEntity","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-entity.html","searchKeys":["assertEntity","final EntitySubject assertEntity<I, E extends Entity<I, ? extends EntityState>>(Class<E> entityClass, I id)","io.spine.testing.server.blackbox.BlackBoxContext.assertEntity"]},{"name":"final EntitySubject assertEntity<I, E extends Entity<I, ? extends EntityState>>(I id, Class<E> entityClass)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertEntity","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-entity.html","searchKeys":["assertEntity","final EntitySubject assertEntity<I, E extends Entity<I, ? extends EntityState>>(I id, Class<E> entityClass)","io.spine.testing.server.blackbox.BlackBoxContext.assertEntity"]},{"name":"final EntitySubject assertEntityWithState<I, S extends EntityState>(Class<S> stateClass, I id)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertEntityWithState","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-entity-with-state.html","searchKeys":["assertEntityWithState","final EntitySubject assertEntityWithState<I, S extends EntityState>(Class<S> stateClass, I id)","io.spine.testing.server.blackbox.BlackBoxContext.assertEntityWithState"]},{"name":"final EntitySubject assertEntityWithState<I, S extends EntityState>(I id, Class<S> stateClass)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertEntityWithState","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-entity-with-state.html","searchKeys":["assertEntityWithState","final EntitySubject assertEntityWithState<I, S extends EntityState>(I id, Class<S> stateClass)","io.spine.testing.server.blackbox.BlackBoxContext.assertEntityWithState"]},{"name":"final EventSubject assertEvents()","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertEvents","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-events.html","searchKeys":["assertEvents","final EventSubject assertEvents()","io.spine.testing.server.blackbox.BlackBoxContext.assertEvents"]},{"name":"final ProtoFluentAssertion assertEvent(Class<? extends EventMessage> eventClass)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertEvent","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-event.html","searchKeys":["assertEvent","final ProtoFluentAssertion assertEvent(Class<? extends EventMessage> eventClass)","io.spine.testing.server.blackbox.BlackBoxContext.assertEvent"]},{"name":"final ProtoFluentAssertion assertState<I, S extends EntityState>(I id, Class<S> stateClass)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertState","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-state.html","searchKeys":["assertState","final ProtoFluentAssertion assertState<I, S extends EntityState>(I id, Class<S> stateClass)","io.spine.testing.server.blackbox.BlackBoxContext.assertState"]},{"name":"final ProtoSubject message(int index)","description":"io.spine.testing.server.EmittedMessageSubject.message","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/message.html","searchKeys":["message","final ProtoSubject message(int index)","io.spine.testing.server.EmittedMessageSubject.message"]},{"name":"final S withType(Class<? extends M> messageClass)","description":"io.spine.testing.server.EmittedMessageSubject.withType","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/with-type.html","searchKeys":["withType","final S withType(Class<? extends M> messageClass)","io.spine.testing.server.EmittedMessageSubject.withType"]},{"name":"final boolean isOpen()","description":"io.spine.testing.server.blackbox.BlackBoxContext.isOpen","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/is-open.html","searchKeys":["isOpen","final boolean isOpen()","io.spine.testing.server.blackbox.BlackBoxContext.isOpen"]},{"name":"final void assertEvent(EventMessage event)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertEvent","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-event.html","searchKeys":["assertEvent","final void assertEvent(EventMessage event)","io.spine.testing.server.blackbox.BlackBoxContext.assertEvent"]},{"name":"final void assertState<I, S extends EntityState>(I id, S entityState)","description":"io.spine.testing.server.blackbox.BlackBoxContext.assertState","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/assert-state.html","searchKeys":["assertState","final void assertState<I, S extends EntityState>(I id, S entityState)","io.spine.testing.server.blackbox.BlackBoxContext.assertState"]},{"name":"final void close()","description":"io.spine.testing.server.blackbox.BlackBoxContext.close","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/close.html","searchKeys":["close","final void close()","io.spine.testing.server.blackbox.BlackBoxContext.close"]},{"name":"final void hasSize(int expectedSize)","description":"io.spine.testing.server.EmittedMessageSubject.hasSize","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/has-size.html","searchKeys":["hasSize","final void hasSize(int expectedSize)","io.spine.testing.server.EmittedMessageSubject.hasSize"]},{"name":"final void isEmpty()","description":"io.spine.testing.server.EmittedMessageSubject.isEmpty","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/is-empty.html","searchKeys":["isEmpty","final void isEmpty()","io.spine.testing.server.EmittedMessageSubject.isEmpty"]},{"name":"final void isNotEmpty()","description":"io.spine.testing.server.EmittedMessageSubject.isNotEmpty","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/is-not-empty.html","searchKeys":["isNotEmpty","final void isNotEmpty()","io.spine.testing.server.EmittedMessageSubject.isNotEmpty"]},{"name":"public abstract class BlackBoxContext","description":"io.spine.testing.server.blackbox.BlackBoxContext","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/index.html","searchKeys":["BlackBoxContext","public abstract class BlackBoxContext","io.spine.testing.server.blackbox.BlackBoxContext"]},{"name":"public abstract class ContextAwareTest","description":"io.spine.testing.server.blackbox.ContextAwareTest","location":"testutil-server/io.spine.testing.server.blackbox/-context-aware-test/index.html","searchKeys":["ContextAwareTest","public abstract class ContextAwareTest","io.spine.testing.server.blackbox.ContextAwareTest"]},{"name":"public abstract class EmittedMessageSubject<S extends EmittedMessageSubject<S, T, M>, T extends Signal, M extends SerializableMessage>","description":"io.spine.testing.server.EmittedMessageSubject","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/index.html","searchKeys":["EmittedMessageSubject","public abstract class EmittedMessageSubject<S extends EmittedMessageSubject<S, T, M>, T extends Signal, M extends SerializableMessage>","io.spine.testing.server.EmittedMessageSubject"]},{"name":"public abstract class TenantAwareTest","description":"io.spine.testing.server.tenant.TenantAwareTest","location":"testutil-server/io.spine.testing.server.tenant/-tenant-aware-test/index.html","searchKeys":["TenantAwareTest","public abstract class TenantAwareTest","io.spine.testing.server.tenant.TenantAwareTest"]},{"name":"public class TestEventFactory","description":"io.spine.testing.server.TestEventFactory","location":"testutil-server/io.spine.testing.server/-test-event-factory/index.html","searchKeys":["TestEventFactory","public class TestEventFactory","io.spine.testing.server.TestEventFactory"]},{"name":"public final class Assertions","description":"io.spine.testing.server.Assertions","location":"testutil-server/io.spine.testing.server/-assertions/index.html","searchKeys":["Assertions","public final class Assertions","io.spine.testing.server.Assertions"]},{"name":"public final class CommandSubject extends EmittedMessageSubject<S, T, M>","description":"io.spine.testing.server.CommandSubject","location":"testutil-server/io.spine.testing.server/-command-subject/index.html","searchKeys":["CommandSubject","public final class CommandSubject extends EmittedMessageSubject<S, T, M>","io.spine.testing.server.CommandSubject"]},{"name":"public final class EntitySubject","description":"io.spine.testing.server.entity.EntitySubject","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/index.html","searchKeys":["EntitySubject","public final class EntitySubject","io.spine.testing.server.entity.EntitySubject"]},{"name":"public final class EntityVersionSubject","description":"io.spine.testing.server.entity.EntityVersionSubject","location":"testutil-server/io.spine.testing.server.entity/-entity-version-subject/index.html","searchKeys":["EntityVersionSubject","public final class EntityVersionSubject","io.spine.testing.server.entity.EntityVersionSubject"]},{"name":"public final class EventSubject extends EmittedMessageSubject<S, T, M>","description":"io.spine.testing.server.EventSubject","location":"testutil-server/io.spine.testing.server/-event-subject/index.html","searchKeys":["EventSubject","public final class EventSubject extends EmittedMessageSubject<S, T, M>","io.spine.testing.server.EventSubject"]},{"name":"public final class IterableEntityVersionSubject","description":"io.spine.testing.server.entity.IterableEntityVersionSubject","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/index.html","searchKeys":["IterableEntityVersionSubject","public final class IterableEntityVersionSubject","io.spine.testing.server.entity.IterableEntityVersionSubject"]},{"name":"public final class ModelTests","description":"io.spine.testing.server.model.ModelTests","location":"testutil-server/io.spine.testing.server.model/-model-tests/index.html","searchKeys":["ModelTests","public final class ModelTests","io.spine.testing.server.model.ModelTests"]},{"name":"public final class NoOpLifecycle","description":"io.spine.testing.server.NoOpLifecycle","location":"testutil-server/io.spine.testing.server/-no-op-lifecycle/index.html","searchKeys":["NoOpLifecycle","public final class NoOpLifecycle","io.spine.testing.server.NoOpLifecycle"]},{"name":"public final class QueryResultSubject","description":"io.spine.testing.server.query.QueryResultSubject","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/index.html","searchKeys":["QueryResultSubject","public final class QueryResultSubject","io.spine.testing.server.query.QueryResultSubject"]},{"name":"public final class ResponseStatusSubject","description":"io.spine.testing.server.query.ResponseStatusSubject","location":"testutil-server/io.spine.testing.server.query/-response-status-subject/index.html","searchKeys":["ResponseStatusSubject","public final class ResponseStatusSubject","io.spine.testing.server.query.ResponseStatusSubject"]},{"name":"public final class SubscriptionFixture","description":"io.spine.testing.server.blackbox.SubscriptionFixture","location":"testutil-server/io.spine.testing.server.blackbox/-subscription-fixture/index.html","searchKeys":["SubscriptionFixture","public final class SubscriptionFixture","io.spine.testing.server.blackbox.SubscriptionFixture"]},{"name":"static BlackBoxContext from(BoundedContextBuilder builder)","description":"io.spine.testing.server.blackbox.BlackBoxContext.from","location":"testutil-server/io.spine.testing.server.blackbox/-black-box-context/from.html","searchKeys":["from","static BlackBoxContext from(BoundedContextBuilder builder)","io.spine.testing.server.blackbox.BlackBoxContext.from"]},{"name":"static CommandSubject assertThat(Iterable<Command> actual)","description":"io.spine.testing.server.CommandSubject.assertThat","location":"testutil-server/io.spine.testing.server/-command-subject/assert-that.html","searchKeys":["assertThat","static CommandSubject assertThat(Iterable<Command> actual)","io.spine.testing.server.CommandSubject.assertThat"]},{"name":"static EntitySubject assertEntity<E extends Entity<?, ?>>(E entity)","description":"io.spine.testing.server.entity.EntitySubject.assertEntity","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/assert-entity.html","searchKeys":["assertEntity","static EntitySubject assertEntity<E extends Entity<?, ?>>(E entity)","io.spine.testing.server.entity.EntitySubject.assertEntity"]},{"name":"static EntityVersionSubject assertEntityVersion(Version version)","description":"io.spine.testing.server.entity.EntityVersionSubject.assertEntityVersion","location":"testutil-server/io.spine.testing.server.entity/-entity-version-subject/assert-entity-version.html","searchKeys":["assertEntityVersion","static EntityVersionSubject assertEntityVersion(Version version)","io.spine.testing.server.entity.EntityVersionSubject.assertEntityVersion"]},{"name":"static EventSubject assertThat(Iterable<Event> actual)","description":"io.spine.testing.server.EventSubject.assertThat","location":"testutil-server/io.spine.testing.server/-event-subject/assert-that.html","searchKeys":["assertThat","static EventSubject assertThat(Iterable<Event> actual)","io.spine.testing.server.EventSubject.assertThat"]},{"name":"static Factory<CommandSubject, Iterable<Command>> commands()","description":"io.spine.testing.server.CommandSubject.commands","location":"testutil-server/io.spine.testing.server/-command-subject/commands.html","searchKeys":["commands","static Factory<CommandSubject, Iterable<Command>> commands()","io.spine.testing.server.CommandSubject.commands"]},{"name":"static Factory<EventSubject, Iterable<Event>> events()","description":"io.spine.testing.server.EventSubject.events","location":"testutil-server/io.spine.testing.server/-event-subject/events.html","searchKeys":["events","static Factory<EventSubject, Iterable<Event>> events()","io.spine.testing.server.EventSubject.events"]},{"name":"static Factory<IterableEntityVersionSubject, Iterable<Version>> entityVersions()","description":"io.spine.testing.server.entity.IterableEntityVersionSubject.entityVersions","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/entity-versions.html","searchKeys":["entityVersions","static Factory<IterableEntityVersionSubject, Iterable<Version>> entityVersions()","io.spine.testing.server.entity.IterableEntityVersionSubject.entityVersions"]},{"name":"static IterableEntityVersionSubject assertEntityVersions(Iterable<Version> versions)","description":"io.spine.testing.server.entity.IterableEntityVersionSubject.assertEntityVersions","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/assert-entity-versions.html","searchKeys":["assertEntityVersions","static IterableEntityVersionSubject assertEntityVersions(Iterable<Version> versions)","io.spine.testing.server.entity.IterableEntityVersionSubject.assertEntityVersions"]},{"name":"static Method getMethod(Class<? extends Object> cls, String methodName)","description":"io.spine.testing.server.model.ModelTests.getMethod","location":"testutil-server/io.spine.testing.server.model/-model-tests/get-method.html","searchKeys":["getMethod","static Method getMethod(Class<? extends Object> cls, String methodName)","io.spine.testing.server.model.ModelTests.getMethod"]},{"name":"static NoOpLifecycle instance()","description":"io.spine.testing.server.NoOpLifecycle.instance","location":"testutil-server/io.spine.testing.server/-no-op-lifecycle/instance.html","searchKeys":["instance","static NoOpLifecycle instance()","io.spine.testing.server.NoOpLifecycle.instance"]},{"name":"static QueryResultSubject assertQueryResult(QueryResponse queryResponse)","description":"io.spine.testing.server.query.QueryResultSubject.assertQueryResult","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/assert-query-result.html","searchKeys":["assertQueryResult","static QueryResultSubject assertQueryResult(QueryResponse queryResponse)","io.spine.testing.server.query.QueryResultSubject.assertQueryResult"]},{"name":"static ResponseStatusSubject assertResponseStatus(Status status)","description":"io.spine.testing.server.query.ResponseStatusSubject.assertResponseStatus","location":"testutil-server/io.spine.testing.server.query/-response-status-subject/assert-response-status.html","searchKeys":["assertResponseStatus","static ResponseStatusSubject assertResponseStatus(Status status)","io.spine.testing.server.query.ResponseStatusSubject.assertResponseStatus"]},{"name":"static TenantIndex createTenantIndex(boolean multitenant)","description":"io.spine.testing.server.tenant.TenantAwareTest.createTenantIndex","location":"testutil-server/io.spine.testing.server.tenant/-tenant-aware-test/create-tenant-index.html","searchKeys":["createTenantIndex","static TenantIndex createTenantIndex(boolean multitenant)","io.spine.testing.server.tenant.TenantAwareTest.createTenantIndex"]},{"name":"static TestEventFactory newInstance(Class<? extends Object> testSuiteClass)","description":"io.spine.testing.server.TestEventFactory.newInstance","location":"testutil-server/io.spine.testing.server/-test-event-factory/new-instance.html","searchKeys":["newInstance","static TestEventFactory newInstance(Class<? extends Object> testSuiteClass)","io.spine.testing.server.TestEventFactory.newInstance"]},{"name":"static TestEventFactory newInstance(Message producerId, Class<? extends Object> testSuiteClass)","description":"io.spine.testing.server.TestEventFactory.newInstance","location":"testutil-server/io.spine.testing.server/-test-event-factory/new-instance.html","searchKeys":["newInstance","static TestEventFactory newInstance(Message producerId, Class<? extends Object> testSuiteClass)","io.spine.testing.server.TestEventFactory.newInstance"]},{"name":"static TestEventFactory newInstance(Message producerId, TestActorRequestFactory requestFactory)","description":"io.spine.testing.server.TestEventFactory.newInstance","location":"testutil-server/io.spine.testing.server/-test-event-factory/new-instance.html","searchKeys":["newInstance","static TestEventFactory newInstance(Message producerId, TestActorRequestFactory requestFactory)","io.spine.testing.server.TestEventFactory.newInstance"]},{"name":"static TestEventFactory newInstance(TestActorRequestFactory requestFactory)","description":"io.spine.testing.server.TestEventFactory.newInstance","location":"testutil-server/io.spine.testing.server/-test-event-factory/new-instance.html","searchKeys":["newInstance","static TestEventFactory newInstance(TestActorRequestFactory requestFactory)","io.spine.testing.server.TestEventFactory.newInstance"]},{"name":"static void assertCommandClasses(Collection<CommandClass> commandClasses, Array<Class<? extends CommandMessage>> expected)","description":"io.spine.testing.server.Assertions.assertCommandClasses","location":"testutil-server/io.spine.testing.server/-assertions/assert-command-classes.html","searchKeys":["assertCommandClasses","static void assertCommandClasses(Collection<CommandClass> commandClasses, Array<Class<? extends CommandMessage>> expected)","io.spine.testing.server.Assertions.assertCommandClasses"]},{"name":"static void assertCommandClassesExactly(Iterable<CommandClass> commandClasses, Array<Class<? extends CommandMessage>> expected)","description":"io.spine.testing.server.Assertions.assertCommandClassesExactly","location":"testutil-server/io.spine.testing.server/-assertions/assert-command-classes-exactly.html","searchKeys":["assertCommandClassesExactly","static void assertCommandClassesExactly(Iterable<CommandClass> commandClasses, Array<Class<? extends CommandMessage>> expected)","io.spine.testing.server.Assertions.assertCommandClassesExactly"]},{"name":"static void assertEventClasses(Collection<EventClass> eventClasses, Array<Class<? extends EventMessage>> expected)","description":"io.spine.testing.server.Assertions.assertEventClasses","location":"testutil-server/io.spine.testing.server/-assertions/assert-event-classes.html","searchKeys":["assertEventClasses","static void assertEventClasses(Collection<EventClass> eventClasses, Array<Class<? extends EventMessage>> expected)","io.spine.testing.server.Assertions.assertEventClasses"]},{"name":"static void assertEventClassesExactly(Iterable<EventClass> eventClasses, Array<Class<? extends EventMessage>> expected)","description":"io.spine.testing.server.Assertions.assertEventClassesExactly","location":"testutil-server/io.spine.testing.server/-assertions/assert-event-classes-exactly.html","searchKeys":["assertEventClassesExactly","static void assertEventClassesExactly(Iterable<EventClass> eventClasses, Array<Class<? extends EventMessage>> expected)","io.spine.testing.server.Assertions.assertEventClassesExactly"]},{"name":"static void dropAllModels()","description":"io.spine.testing.server.model.ModelTests.dropAllModels","location":"testutil-server/io.spine.testing.server.model/-model-tests/drop-all-models.html","searchKeys":["dropAllModels","static void dropAllModels()","io.spine.testing.server.model.ModelTests.dropAllModels"]},{"name":"void EmittedMessageSubject(FailureMetadata metadata, Iterable<T> actual)","description":"io.spine.testing.server.EmittedMessageSubject.EmittedMessageSubject","location":"testutil-server/io.spine.testing.server/-emitted-message-subject/-emitted-message-subject.html","searchKeys":["EmittedMessageSubject","void EmittedMessageSubject(FailureMetadata metadata, Iterable<T> actual)","io.spine.testing.server.EmittedMessageSubject.EmittedMessageSubject"]},{"name":"void clearCurrentTenant()","description":"io.spine.testing.server.tenant.TenantAwareTest.clearCurrentTenant","location":"testutil-server/io.spine.testing.server.tenant/-tenant-aware-test/clear-current-tenant.html","searchKeys":["clearCurrentTenant","void clearCurrentTenant()","io.spine.testing.server.tenant.TenantAwareTest.clearCurrentTenant"]},{"name":"void closeContext()","description":"io.spine.testing.server.blackbox.ContextAwareTest.closeContext","location":"testutil-server/io.spine.testing.server.blackbox/-context-aware-test/close-context.html","searchKeys":["closeContext","void closeContext()","io.spine.testing.server.blackbox.ContextAwareTest.closeContext"]},{"name":"void containsAllNewerOrEqualTo(Version version)","description":"io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllNewerOrEqualTo","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/contains-all-newer-or-equal-to.html","searchKeys":["containsAllNewerOrEqualTo","void containsAllNewerOrEqualTo(Version version)","io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllNewerOrEqualTo"]},{"name":"void containsAllNewerThan(Version version)","description":"io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllNewerThan","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/contains-all-newer-than.html","searchKeys":["containsAllNewerThan","void containsAllNewerThan(Version version)","io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllNewerThan"]},{"name":"void containsAllOlderOrEqualTo(Version version)","description":"io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllOlderOrEqualTo","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/contains-all-older-or-equal-to.html","searchKeys":["containsAllOlderOrEqualTo","void containsAllOlderOrEqualTo(Version version)","io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllOlderOrEqualTo"]},{"name":"void containsAllOlderThan(Version version)","description":"io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllOlderThan","location":"testutil-server/io.spine.testing.server.entity/-iterable-entity-version-subject/contains-all-older-than.html","searchKeys":["containsAllOlderThan","void containsAllOlderThan(Version version)","io.spine.testing.server.entity.IterableEntityVersionSubject.containsAllOlderThan"]},{"name":"void createContext()","description":"io.spine.testing.server.blackbox.ContextAwareTest.createContext","location":"testutil-server/io.spine.testing.server.blackbox/-context-aware-test/create-context.html","searchKeys":["createContext","void createContext()","io.spine.testing.server.blackbox.ContextAwareTest.createContext"]},{"name":"void doesNotExist()","description":"io.spine.testing.server.entity.EntitySubject.doesNotExist","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/does-not-exist.html","searchKeys":["doesNotExist","void doesNotExist()","io.spine.testing.server.entity.EntitySubject.doesNotExist"]},{"name":"void exists()","description":"io.spine.testing.server.entity.EntitySubject.exists","location":"testutil-server/io.spine.testing.server.entity/-entity-subject/exists.html","searchKeys":["exists","void exists()","io.spine.testing.server.entity.EntitySubject.exists"]},{"name":"void hasStatus(StatusCase status)","description":"io.spine.testing.server.query.QueryResultSubject.hasStatus","location":"testutil-server/io.spine.testing.server.query/-query-result-subject/has-status.html","searchKeys":["hasStatus","void hasStatus(StatusCase status)","io.spine.testing.server.query.QueryResultSubject.hasStatus"]},{"name":"void isError()","description":"io.spine.testing.server.query.ResponseStatusSubject.isError","location":"testutil-server/io.spine.testing.server.query/-response-status-subject/is-error.html","searchKeys":["isError","void isError()","io.spine.testing.server.query.ResponseStatusSubject.isError"]},{"name":"void isNewerOrEqualTo(Version other)","description":"io.spine.testing.server.entity.EntityVersionSubject.isNewerOrEqualTo","location":"testutil-server/io.spine.testing.server.entity/-entity-version-subject/is-newer-or-equal-to.html","searchKeys":["isNewerOrEqualTo","void isNewerOrEqualTo(Version other)","io.spine.testing.server.entity.EntityVersionSubject.isNewerOrEqualTo"]},{"name":"void isNewerThan(Version other)","description":"io.spine.testing.server.entity.EntityVersionSubject.isNewerThan","location":"testutil-server/io.spine.testing.server.entity/-entity-version-subject/is-newer-than.html","searchKeys":["isNewerThan","void isNewerThan(Version other)","io.spine.testing.server.entity.EntityVersionSubject.isNewerThan"]},{"name":"void isOk()","description":"io.spine.testing.server.query.ResponseStatusSubject.isOk","location":"testutil-server/io.spine.testing.server.query/-response-status-subject/is-ok.html","searchKeys":["isOk","void isOk()","io.spine.testing.server.query.ResponseStatusSubject.isOk"]},{"name":"void isOlderOrEqualTo(Version other)","description":"io.spine.testing.server.entity.EntityVersionSubject.isOlderOrEqualTo","location":"testutil-server/io.spine.testing.server.entity/-entity-version-subject/is-older-or-equal-to.html","searchKeys":["isOlderOrEqualTo","void isOlderOrEqualTo(Version other)","io.spine.testing.server.entity.EntityVersionSubject.isOlderOrEqualTo"]},{"name":"void isOlderThan(Version other)","description":"io.spine.testing.server.entity.EntityVersionSubject.isOlderThan","location":"testutil-server/io.spine.testing.server.entity/-entity-version-subject/is-older-than.html","searchKeys":["isOlderThan","void isOlderThan(Version other)","io.spine.testing.server.entity.EntityVersionSubject.isOlderThan"]},{"name":"void isRejection()","description":"io.spine.testing.server.query.ResponseStatusSubject.isRejection","location":"testutil-server/io.spine.testing.server.query/-response-status-subject/is-rejection.html","searchKeys":["isRejection","void isRejection()","io.spine.testing.server.query.ResponseStatusSubject.isRejection"]},{"name":"void setCurrentTenant(TenantId tenantId)","description":"io.spine.testing.server.tenant.TenantAwareTest.setCurrentTenant","location":"testutil-server/io.spine.testing.server.tenant/-tenant-aware-test/set-current-tenant.html","searchKeys":["setCurrentTenant","void setCurrentTenant(TenantId tenantId)","io.spine.testing.server.tenant.TenantAwareTest.setCurrentTenant"]}]
