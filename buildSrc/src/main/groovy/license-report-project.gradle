/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
//file:noinspection UnnecessaryQualifiedReference

import com.github.jk1.license.*
import com.github.jk1.license.render.ReportRenderer
import io.spine.internal.gradle.PublishExtension

/**
 * This script plugin generates the license report for all dependencies used in a project.
 *
 * <p>Transitive dependencies are included.
 *
 * <p>Use `generateLicenseReport` task to trigger the generation.
 */

buildscript {
    repositories {
        gradlePluginPortal()
    }

    dependencies {
        classpath io.spine.internal.dependency.LicenseReport.lib
    }
}

apply plugin: io.spine.internal.dependency.LicenseReport.GradlePlugin.id

final def commonPath = io.spine.internal.gradle.Scripts.commonPath
apply from: "${rootDir}/${commonPath}/license-report-common.gradle"

final reportOutputDir = "${project.buildDir}" + licenseReportConfig.relativePath
licenseReport {
    outputDir = "$reportOutputDir"
    excludeGroups = ['io.spine', 'io.spine.tools', 'io.spine.gcloud']
    configurations = ALL
    renderers = [new MarkdownReportRenderer(licenseReportConfig.outputFilename)]
}

/**
 * Renders the dependency report in markdown.
 */
class MarkdownReportRenderer implements ReportRenderer {

    private Project project
    private LicenseReportExtension config
    private File output
    private String fileName

    MarkdownReportRenderer(final String fileName) {
        this.fileName = fileName
    }

    @Input
    String getFileNameCache() { return this.fileName }

    void render(final ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        final String prefix = prefixFor(project)
        output.text = """
    \n# Dependencies of `${project.group}:$prefix${project.name}:${project.version}`
"""
        printDependencies(data)
        output << """
    
        \n The dependencies distributed under several licenses, are used according their commercial-use-friendly license.
"""
        output << "\n\nThis report was generated on **${new Date()}**"
        output << " using [Gradle-License-Report plugin]" +
                "(https://github.com/jk1/Gradle-License-Report) by Evgeny Naumenko, licensed under" +
                " [Apache 2.0 License](https://github.com/jk1/Gradle-License-Report/blob/master/LICENSE)."
    }

    /**
     * Obtains the artifact prefix for the passed project.
     *
     * <p>If the {@code PublishExtension} has the property {@code spinePrefix} set to {@code true}
     * returns {@code "spine-"}, otherwise an empty string.
     */
    private static String prefixFor(final Project project) {
        final publishExtension = project.rootProject.extensions.findByType(PublishExtension.class)
        final prefix = (publishExtension?.spinePrefix?.getOrElse(false) ?: false)
                ? "spine-"
                : ""
        prefix
    }

    private void printDependencies(final ProjectData data) {

        final runtimeDependencies = new HashSet()
        final compileToolingDependencies = new HashSet()

        data.configurations.each { final ConfigurationData config ->


            if(["runtime", "runtimeClasspath"].indexOf(config.name) != -1) {
                runtimeDependencies.addAll(config.dependencies)
            } else {
                compileToolingDependencies.addAll(config.dependencies)
            }
        }

        output << "\n## Runtime"
        runtimeDependencies.toArray().sort().each {
            printModuleDependency(it)
        }

        output << "\n## Compile, tests and tooling"
        compileToolingDependencies.toArray().sort().each {
            printModuleDependency(it)
        }
    }

    private void printModuleDependency(final ModuleData data) {
        boolean projectUrlDone = false
        output << "\n1."

        if (data.group) {
            output << " **Group:** $data.group"
        }
        if (data.name) {
            output << " **Name:** $data.name"
        }
        if (data.version) {
            output << " **Version:** $data.version"
        }
        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            output << " **No license information found**"
            return
        }

        if (!data.manifests.isEmpty() && !data.poms.isEmpty()) {
            final ManifestData manifest = data.manifests.first()
            final PomData pomData = data.poms.first()
            if (manifest.url && pomData.projectUrl && manifest.url == pomData.projectUrl) {
                output << "\n     * **Project URL:** [$manifest.url]($manifest.url)"
                projectUrlDone = true
            }
        }

        if (!data.manifests.isEmpty()) {
            final ManifestData manifest = data.manifests.first()
            if (manifest.url && !projectUrlDone) {
                output << "\n     * **Manifest Project URL:** [$manifest.url]($manifest.url)"
            }
            if (manifest.license) {
                if (manifest.license.startsWith("http")) {
                    output << "\n     * **Manifest license URL:** [$manifest.license]($manifest.license)"

                } else if (manifest.hasPackagedLicense) {
                    output << "\n     * **Packaged License File:** [$manifest.license]($manifest.url)"
                } else {
                    output << "\n     * **Manifest License:** $manifest.license (Not packaged)"

                }
            }
        }

        if (!data.poms.isEmpty()) {
            final PomData pomData = data.poms.first()
            if (pomData.projectUrl && !projectUrlDone) {
                output << "\n     * **POM Project URL:** [$pomData.projectUrl]($pomData.projectUrl)"

            }
            if (pomData.licenses) {
                pomData.licenses.each { final License license ->
                    output << "\n     * **POM License: $license.name**"

                    if (license.url) {
                        if (license.url.startsWith("http")) {
                            output << " - [$license.url]($license.url)"
                        } else {
                            output << " **License:** $license.url"

                        }
                    }
                }
            }
        }
        output << '\n'
    }
}
