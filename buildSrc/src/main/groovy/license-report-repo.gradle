/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * This script launches the per-project license report generation, concatenates the results
 * and puts the resulting file into a repository root folder.
 *
 * If the repository consists just of a single root project, the generation is configured
 * just for it alone.
 *
 * The script also configures the `build` task to be finalized by the license report routines.
 *
 * See `license-report-project.gradle` for a per-project license report generation.
 */

println("`license-report-repo.gradle` script is deprecated. " +
        "Please use the `LicenseReporter` utility instead.")


final def commonPath = io.spine.internal.gradle.Scripts.commonPath
apply from: "${rootDir}/${commonPath}/license-report-common.gradle"

task reportLicensesInRepo { final Task task ->
    def targetProjects;
    if (subprojects.isEmpty()) {
        println "Configuring the license report for a single root project."
        targetProjects = [task.project]
    } else {
        println "Configuring the license report for all subprojects of a root project."
        targetProjects = subprojects
    }

    targetProjects.forEach {
        final def generateLicenseReport = it.tasks.findByName('generateLicenseReport')
        task.dependsOn(generateLicenseReport)
        generateLicenseReport.dependsOn(it.tasks.findByName('assemble'))
    }

    doLast {
        final paths = targetProjects.stream().collect {
            "${it.buildDir}${licenseReportConfig.relativePath}/${licenseReportConfig.outputFilename}"
        }

        println "Aggregating the reports from the target projects."
        final aggregatedContent = paths.collect { (new File(it)).getText() }.join("\n\n\n")

        (new File("$rootDir/$licenseReportConfig.outputFilename")).text = aggregatedContent
    }
}

build.finalizedBy reportLicensesInRepo
reportLicensesInRepo.dependsOn assemble
