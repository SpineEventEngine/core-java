/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// Apply this script to enable the combined JaCoCo test report.
//
// This task combines the XML report results from all Java sub-projects.
// Inspired by: https://gist.github.com/aalmiray/e6f54aa4b3803be0bcac
//
// This task runs after `:check` task.

import groovy.io.FileType

import java.util.stream.Collectors

// Required to grab dependencies for `jacocoRootReport` task.
repositories {
    mavenCentral()
}

println("`jacoco.gradle` script is deprecated. Please use the `JacocoConfig` instead.")

// Adds the `:check` task.
apply plugin: 'base'

final def javaProjects = subprojects.findAll { it.pluginManager.hasPlugin('jacoco') }
final def jacocoReports = file("${rootProject.buildDir}/subreports/jacoco/")

task copyReports(dependsOn: javaProjects.jacocoTestReport, type: Copy) {
    description = "Copies JaCoCo reports from subprojects into a single directory in the root project."

    from files(javaProjects.jacocoTestReport.executionData)
    into jacocoReports

    rename { "${UUID.randomUUID().toString()}.exec" }
}

// Create an combined coverage report across Java modules,
// excluding the generated content from the coverage stats.
//
task jacocoRootReport(dependsOn: ':copyReports', type: JacocoReport) {

    final def sourceDirs = CodebaseFilter.nonGeneratedOnly(files(javaProjects.sourceSets.main.java.srcDirs))
    additionalSourceDirs.from sourceDirs
    sourceDirectories.from sourceDirs
    executionData.from fileTree(jacocoReports)

    final def filter = new CodebaseFilter(project,
            javaProjects.sourceSets.main.java.srcDirs,
            javaProjects.sourceSets.main.output)
    final def nonGeneratedFiles = files(filter.findNonGeneratedCompiledFiles())
    classDirectories.from nonGeneratedFiles
    additionalClassDirs.from nonGeneratedFiles

    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(false)
    }
    onlyIf = {
        true
    }
}

check.dependsOn jacocoRootReport

/**
 * Serves to distinguish the {@code .java} and {@code .class} files built from
 * the Protobuf definitions from the human-created production code.
 */
class CodebaseFilter {

    private static final String GENERATED_PATH_MARKER = "generated"

    private static final String JAVA_SRC_FOLDER_MARKER = "/java/"
    private static final String SPINE_JAVA_SRC_FOLDER_MARKER = "main/spine/"
    private static final String GRPC_SRC_FOLDER_MARKER = "/main/grpc/"

    private static final String JAVA_OUTPUT_FOLDER_MARKER = "/main/"

    private static final String JAVA_SOURCE_FILE_EXTENSION = ".java"
    private static final String COMPILED_CLASS_FILE_EXTENSION = ".class"
    private static final String ANONYMOUS_CLASS_MARKER = '$'
    private static final String ANONYMOUS_CLASS_PATTERN = "\\${ANONYMOUS_CLASS_MARKER}"

    private final Project project
    private final def javaSrcDirs
    private final def outputDirs

    CodebaseFilter(final Project project, final javaSrcDirs, final outputDirs) {
        this.project = project
        this.javaSrcDirs = javaSrcDirs
        this.outputDirs = outputDirs
    }

    static FileCollection nonGeneratedOnly(final FileCollection files) {
        return files.filter {
            !it.absolutePath.contains(GENERATED_PATH_MARKER)
        }
    }

    static FileCollection generatedOnly(final FileCollection files) {
        return files.filter {
            it.absolutePath.contains(GENERATED_PATH_MARKER)
        }
    }

    private static String parseClassName(final File file, final String sourceFolderMarker, final String extension) {

        final def index = file.absolutePath.lastIndexOf(sourceFolderMarker)
        if (index > 0) {
            def filePathInFolder = file.absolutePath.substring(index + sourceFolderMarker.length())
            if (filePathInFolder.endsWith(extension)) {
                filePathInFolder = filePathInFolder.substring(0, filePathInFolder.length() - extension.length())

                final def className = filePathInFolder.replace('/', '.')
                return className
            } else {
                return null
            }
        } else {
            return null
        }
    }

    private LinkedList<String> getGeneratedClassNames() {
        final def sourceFiles = project.files(javaSrcDirs)
        final def generatedSourceFiles = generatedOnly(sourceFiles)

        final def generatedClassNames = []
        generatedSourceFiles.each { final folder ->
            if (folder.exists() && folder.isDirectory()) {
                folder.eachFileRecurse(FileType.FILES) { final aFile ->
                    final def name = parseClassName(aFile, JAVA_SRC_FOLDER_MARKER, JAVA_SOURCE_FILE_EXTENSION)
                    if (name != null) {
                        generatedClassNames.add(name)
                    } else {
                        // Try another folder prefix; perhaps this file is gRPC service.
                        final def generatedByGrpc = parseClassName(aFile,
                                GRPC_SRC_FOLDER_MARKER,
                                JAVA_SOURCE_FILE_EXTENSION)
                        if (generatedByGrpc != null) {
                            generatedClassNames.add(generatedByGrpc)
                        } else {
                            // Try one more folder prefix; perhaps this file is generated by Spine.
                            final def generatedBySpine =
                                    parseClassName(aFile, SPINE_JAVA_SRC_FOLDER_MARKER, JAVA_SOURCE_FILE_EXTENSION)
                            if (generatedBySpine != null) {
                                generatedClassNames.add(generatedBySpine)
                            }
                        }
                    }
                }
            }
        }

        return generatedClassNames
    }

    List<FileTree> findNonGeneratedCompiledFiles() {
        log("Source dirs for code coverage calculation:")
        final def srcDirs = project.files(javaSrcDirs)
        srcDirs.each {
            log(" - ${it}")
        }

        final def generatedClassNames = getGeneratedClassNames()
        log(generatedClassNames.join('\n'))
        final def nonGeneratedClassTree = outputDirs
                .stream()
                .flatMap { it.getClassesDirs().files.stream() }
                .map { final srcFile ->
                    log("Filtering out the generated classes for ${srcFile}")

                    // Return the filtered `fileTree`s as a collected result.
                    return project.fileTree(dir: srcFile, exclude: { final details ->
                        def className = parseClassName(details.file, JAVA_OUTPUT_FOLDER_MARKER, COMPILED_CLASS_FILE_EXTENSION)

                        // Handling anonymous classes as well.
                        // They should be associated with the same `.java` file as their parent class.
                        if (className != null && className.contains(ANONYMOUS_CLASS_MARKER)) {
                            // Assuming there cannot be more than a single `$`.
                            className = className.split(ANONYMOUS_CLASS_PATTERN)[0]
                        }
                        return generatedClassNames.contains(className)
                    })
                }.collect(Collectors.toList())
        return nonGeneratedClassTree
    }

    private void log(final String message) {
        project.logger.debug(message)
    }
}
