/*
 * Copyright 2025, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.gradle.publish

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/**
 * Calls [ShadowJar.mergeServiceFiles] for the files we use in the Spine SDK.
 */
fun ShadowJar.handleMergingServiceFiles() {
    ServiceFiles.all.forEach {
        mergeServiceFiles(it)
    }
}

@Suppress("ConstPropertyName")
private object ServiceFiles {

    /**
     * Files containing references to descriptor set files.
     */
    private const val descriptorSetReferences = "desc.ref"

    private const val servicesDir = "META-INF/services"
    /**
     * Providers of custom Protobuf options introduced by the libraries.
     */
    private const val optionProviders = "$servicesDir/io.spine.option.OptionsProvider"

    /**
     * KSP symbol processor provider.
     */
    private const val kspSymbolProcessorProviders =
        "$servicesDir/com.google.devtools.ksp.KspSymbolProcessorProvider"

    /**
     * Message routing setup classes generated by the Compiler for JVM.
     */
    private const val routeSetupPackage = "io.spine.server.route.setup"
    private const val routeSetupPrefix = "$servicesDir/$routeSetupPackage"
    private const val commandRoutingSetupClasses = "$routeSetupPrefix.CommandRoutingSetup"
    private const val eventRoutingSetupClasses = "$routeSetupPrefix.EventRoutingSetup"
    private const val stateRoutingSetupClasses = "$routeSetupPrefix.StateRoutingSetup"

    val all = arrayOf(
        descriptorSetReferences,
        optionProviders,
        kspSymbolProcessorProviders,
        commandRoutingSetupClasses,
        eventRoutingSetupClasses,
        stateRoutingSetupClasses
    )
}
